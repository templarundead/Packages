%YAML 1.2
---
# Derived from https://github.com/i-akhmadullin/Sublime-CSS3
name: CSS+
file_extensions:
  - css
  - css.erb
  - css.liquid
scope: source.css
variables:
  # Many variable names taken directly from https://www.w3.org/TR/css3-selectors/#lex
  unicode: '\\\h{1,6}[ \t\n\f]?'
  escape: '(?:{{unicode}}|\\[^\n\f\h])'
  nonascii: '[\p{L}\p{M}\p{S}\p{N}&&[[:^ascii:]]]'
  nmstart: '(?:[[_a-zA-Z]{{nonascii}}]|{{escape}})'
  nmchar: '(?:[[-\w]{{nonascii}}]|{{escape}})'
  ident: '(?:--{{nmchar}}+|-?{{nmstart}}{{nmchar}}*)'

  # Types
  # https://www.w3.org/TR/css3-values/#numeric-types
  # https://www.w3.org/TR/css-syntax-3/#number-token-diagram
  integer: '(?:[-+]?\d+)'
  exponent: '(?:[eE]{{integer}})'
  float: |-
    (?x:
      [-+]? \d* (\.) \d+ {{exponent}}?
    | [-+]? \d+          {{exponent}}
    )

  # Units
  # https://www.w3.org/TR/css3-values/#lengths
  font_relative_lengths: '(?i:em|ex|ch|rem)'
  viewport_percentage_lengths: '(?i:vw|vh|vmin|vmax)'
  absolute_lengths: '(?i:cm|mm|q|in|pt|pc|px|fr)'
  angle_units: '(?i:deg|grad|rad|turn)'
  duration_units: '(?i:s|ms)'
  frequency_units: '(?i:Hz|kHz)'
  resolution_units: '(?i:dpi|dpcm|dppx)'

  custom_element_chars: |-
    (?x:
        [-_a-z0-9\x{00B7}]
      | \\\.
      | [\x{00C0}-\x{00D6}]
      | [\x{00D8}-\x{00F6}]
      | [\x{00F8}-\x{02FF}]
      | [\x{0300}-\x{037D}]
      | [\x{037F}-\x{1FFF}]
      | [\x{200C}-\x{200D}]
      | [\x{203F}-\x{2040}]
      | [\x{2070}-\x{218F}]
      | [\x{2C00}-\x{2FEF}]
      | [\x{3001}-\x{D7FF}]
      | [\x{F900}-\x{FDCF}]
      | [\x{FDF0}-\x{FFFD}]
      | [\x{10000}-\x{EFFFF}]
    )

  combinators: '(?:>{1,3}|[~+])'

  # Predefined Counter Styles
  # https://drafts.csswg.org/css-counter-styles-3/#predefined-counters
  counter_styles: |-
    (?xi:
      (?:a(?:r(?:abic-indic|menian)|sterisks)|b(?:engali|ynary)|c(?:ambodian|ircle|jk-(?:decimal|earthly-branch|heavenly-stem|ideographic))|d(?:e(?:cimal(?:-leading-zero)?|vanagari)|isc(?:losure-(?:closed|open))?)|ethiopic-numeric|g(?:eorgian|u(?:jarat|rmukh)i)|h(?:ebrew|iragana(?:-iroha)?)|japanese-(?:in)?formal|k(?:a(?:nnad|takan(?:a-iroh)?)a|hmer|orean-han(?:gul-|ja-(?:in)?)formal)|l(?:ao|ower-(?:a(?:lpha|rmenian)|greek|hexadecimal|latin|norwegian|roman))|m(?:alayalam|ongolian|yanmar)|none|oriya|persian|s(?:imp-chinese-(?:in)?formal|quare)|t(?:amil|elugu|hai|ibetan|rad-chinese-(?:in)?formal)|upper-(?:a(?:lpha|rmenian)|greek|hexadecimal|latin|norwegian|roman))
    )

contexts:
  main:
    - include: comment-block
    - include: selector
    - include: at-rules
    - include: property-list

  at-rules:
    - include: at-charset
    - include: at-counter-style
    - include: at-custom-media
    - include: at-document
    - include: at-font-face
    - include: at-import
    - include: at-keyframes
    - include: at-media
    - include: at-namespace
    - include: at-page
    - include: at-supports

  # When including `color-values` and `color-adjuster-functions`, make sure it is
  # included after the color adjustors to prevent `color-values` from consuming
  # conflicting function names & color constants such as `red`, `green`, or `blue`.
  color-values:
    - include: color-functions
      # https://www.w3.org/TR/CSS22/syndata.html#color-units
    - match: \b((?:aqua|bl(?:ack|ue)|fuchsia|gr(?:ay|een)|lime|maroon|navy|o(?:liv|rang)e|purple|red|silver|teal|white|yellow))\b
      scope: support.constant.color.w3c-standard-color-name.css
      # https://www.w3.org/TR/css3-color/#svg-color
    - match: \b((?:a(?:liceblu|ntiquewhit|quamarin|zur)e|b(?:eige|isque|l(?:anchedalmond|ueviolet)|rown|urlywood)|c(?:adetblue|h(?:artreus|ocolat)e|or(?:al|n(?:flowerblue|silk))|rimson|yan)|d(?:ark(?:blue|cyan|g(?:oldenrod|r(?:ay|e(?:en|y)))|khaki|magenta|o(?:livegreen|r(?:ange|chid))|red|s(?:almon|eagreen|late(?:blue|gr[ae]y))|turquoise|violet)|eep(?:pink|skyblue)|imgr[ae]y|odgerblue)|f(?:irebrick|loralwhite|orestgreen)|g(?:ainsboro|hostwhite|old(?:enrod)?|re(?:enyellow|y))|ho(?:neydew|tpink)|i(?:ndi(?:anred|go)|vory)|khaki|l(?:a(?:vender(?:blush)?|wngreen)|emonchiffon|i(?:ght(?:blue|c(?:oral|yan)|g(?:oldenrodyellow|r(?:ay|e(?:en|y)))|pink|s(?:almon|eagreen|kyblue|lategr[ae]y|teelblue)|yellow)|megreen|nen))|m(?:agenta|edium(?:aquamarine|blue|orchid|purple|s(?:eagreen|lateblue|pringgreen)|turquoise|violetred)|i(?:dnightblue|ntcream|styrose)|occasin)|navajowhite|o(?:l(?:dlace|ivedrab)|r(?:angere|chi)d)|p(?:a(?:le(?:g(?:oldenrod|reen)|turquoise|violetred)|payawhip)|e(?:achpuff|ru)|ink|lum|owderblue)|r(?:ebeccapurple|o(?:sybrown|yalblue))|s(?:a(?:ddlebrow|lmo|ndybrow)n|ea(?:green|shell)|ienna|kyblue|late(?:blue|gr[ae]y)|now|pringgreen|teelblue)|t(?:an|histle|omato|urquoise)|violet|wh(?:eat|itesmoke)|yellowgreen))\b
      scope: support.constant.color.w3c-extended-color-keywords.css
      # Special Color Keywords
      # https://www.w3.org/TR/css3-color/#currentcolor
      # https://www.w3.org/TR/css3-color/#transparent-def
    - match: \b((?i)currentColor|transparent)\b
      scope: support.constant.color.w3c-special-color-keyword.css
      # Hex Color
    - match: '(#)(\h{3}|\h{6})\b'
      scope: constant.other.color.rgb-value.css
      captures:
        1: punctuation.definition.constant.css
      # RGBA Hexadecimal Colors
      # https://en.wikipedia.org/wiki/RGBA_color_space#RGBA_hexadecimal_.28word-order.29
    - match: '(#)(\h{4}|\h{8})\b'
      scope: constant.other.color.rgba-value.css
      captures:
        1: punctuation.definition.constant.css

  comment-block:
    - match: /\*
      scope: punctuation.definition.comment.css
      push:
        - meta_scope: comment.block.css
        - match: \*/
          scope: punctuation.definition.comment.css
          pop: true
        - match: ^\s*(\*)(?!/)
          captures:
            1: punctuation.definition.comment.css

  at-charset:
    - match: \s*((@)charset\b)\s*
      captures:
        1: keyword.control.at-rule.charset.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.charset.css
        - include: at-rule-punctuation
        - include: literal-string

  # @counter-style
  # https://drafts.csswg.org/css-counter-styles-3/#the-counter-style-rule
  at-counter-style:
    - match: \s*((@)counter-style\b)\s+(?:(?i:\b(decimal|none)\b)|({{ident}}))?\s*(?=\{|$)
      captures:
        1: keyword.control.at-rule.counter-style.css
        2: punctuation.definition.keyword.css
        3: invalid.illegal.counter-style-name.css
        4: entity.other.counter-style-name.css
      push:
        - meta_scope: meta.at-rule.counter-style.css
        - include: comment-block
        - include: rule-list-terminator
        - include: rule-list

  at-custom-media:
    - match: (?=\s*@custom-media\b)
      push:
        - match: ;
          scope: punctuation.terminator.css
          pop: true
        - match: \s*((@)custom-media)
          captures:
            1: keyword.control.at-rule.custom-media.css
            2: punctuation.definition.keyword.css
            3: support.constant.custom-media.css
          push:
            - meta_scope: meta.at-rule.custom-media.css
            - match: \s*(?=;)
              pop: true
            - include: media-query-list

  # @document
  # https://www.w3.org/TR/2012/WD-css3-conditional-20120911/#at-document
  at-document:
    - match: '((@)document)'
      captures:
        1: keyword.control.at-rule.document.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.document.css
        - match: '\{'
          scope: punctuation.definition.block.begin.css
          push:
            - meta_scope: meta.block.css
            - match: '(?=\})'
              pop: true
            - include: main
        - match: '\}'
          scope: meta.block.css punctuation.definition.block.end.css
          pop: true
        - include: comment-block
        - include: url-function
        - include: url-prefix-function
        - include: domain-function
        - include: regexp-function
        - include: comma-delimiter

  at-font-face:
    - match: '\s*((@)font-face)\s*(?=\{|$)'
      captures:
        1: keyword.control.at-rule.font-face.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.font-face.css
        - include: comment-block
        - include: rule-list-terminator
        - include: rule-list

  at-import:
    - match: \s*((@)import\b)\s*
      captures:
        1: keyword.control.at-rule.import.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.import.css
        - include: at-rule-punctuation
        - include: literal-string
        - include: url-function
        - include: media-query-list

  # https://drafts.csswg.org/css-animations/#propdef-animation-name
  keyframe-name:
    - match: '\s*({{ident}})?'
      captures:
        1: entity.other.animation-name.css
      push:
        - match: '\s*(?:(,)|(?=[{;]))'
          captures:
            1: punctuation.definition.arbitrary-repetition.css
          pop: true

  # @keyframes
  # https://drafts.csswg.org/css-animations/#keyframes
  at-keyframes:
    - match: (?=\s*@(?:-webkit-|-moz-|-o-)?keyframes\b)
      push:
        - include: rule-list-terminator
        - match: \s*((@)(-webkit-|-moz-|-o-)?keyframes)
          captures:
            1: keyword.control.at-rule.keyframe.css
            2: punctuation.definition.keyword.css
            3: support.type.property-vendor.css
            4: support.constant.keyframe.css
          push:
            - meta_scope: meta.at-rule.keyframe.css
            - match: '\s*(?=\{)'
              pop: true
            - match: '\s*(?=[^{;])'
              push:
                - match: '\s*(?=[{;])'
                  pop: true
                - include: keyframe-name
        - match: '\s*(\{)'
          captures:
            1: punctuation.section.property-list.css
          push:
            - match: '(?=\})'
              pop: true
            - match: \b(from|to)\b
              scope: keyword.keyframe-selector.css
            - include: comma-delimiter
            - include: numeric-values
            - include: main

  at-media:
    - match: (?=\s*@media\b)
      push:
        - include: rule-list-terminator
        - match: \s*((@)media)
          captures:
            1: keyword.control.at-rule.media.css
            2: punctuation.definition.keyword.css
            3: support.constant.media.css
          push:
            - meta_scope: meta.at-rule.media.css
            - match: '\s*(?=\{)'
              pop: true
            - include: media-query-list
        - match: '\s*(\{)'
          captures:
            1: punctuation.section.property-list.css
          push:
            - match: '(?=\})'
              pop: true
            - include: main

  media-query:
    # Media Types: https://www.w3.org/TR/CSS21/media.html
    - include: comment-block
    - match: \b(?i:all|aural|braille|embossed|handheld|print|projection|screen|speech|tty|tv)\b
      scope: support.constant.media.css
    - match: \b(?i:and|or|not|only)\b
      scope: keyword.operator.logic.media.css
    - match: ','
      scope: punctuation.definition.arbitrary-repetition.css
    - match: \(
      scope: punctuation.definition.group.begin.css
      push:
        - match: \)
          scope: punctuation.definition.group.end.css
          pop: true
        - include: comment-block
        - match: |-
            (?x)
            (
              (?:
                (-webkit-|-o-)?
                (?:min-|max-)?
                (-moz-)?
                (?:
                  (?:device-)?(?:height|width|aspect-ratio|pixel-ratio)
                  |color(?:-index)?|monochrome|resolution
                )
              )
              |grid|scan|orientation
            )\s*(:)?
          captures:
            1: support.type.property-name.media.css
            2: support.type.vendor-prefix.css
            3: support.type.vendor-prefix.css
            4: punctuation.separator.key-value.css
        - match: \b(portrait|landscape|progressive|interlace)\b
          scope: support.constant.property-value.css
        - match: \s*(\d+)(/)(\d+)
          captures:
            1: constant.numeric.integer.decimal.css
            2: keyword.operator.arithmetic.css
            3: constant.numeric.integer.decimal.css
        - include: numeric-values

  media-query-list:
    - match: '\s*(?=[^{;])'
      push:
        - match: '\s*(?=[{;])'
          pop: true
        - include: media-query

  # @namespace
  # https://www.w3.org/TR/css3-namespace/
  at-namespace:
    - match: '\s*((@)namespace)\s+({{ident}}(?!{{nmchar}}|\())?'
      captures:
        1: keyword.control.at-rule.namespace.css
        2: punctuation.definition.keyword.css
        3: entity.other.namespace-prefix.css
      push:
        - meta_scope: meta.at-rule.namespace.css
        - include: at-rule-punctuation
        - include: literal-string
        - include: url-function
        - include: comment-block

  # @page
  # https://www.w3.org/TR/CSS2/page.html
  at-page:
    - match: '\s*((@)page)\s*(?:(:)(first|left|right))?\s*(?=\{|$)'
      captures:
        1: keyword.control.at-rule.page.css
        2: punctuation.definition.keyword.css
        3: punctuation.definition.entity.css
        4: entity.other.pseudo-class.css
      push:
        - meta_scope: meta.at-rule.page.css
        - include: comment-block
        - include: rule-list-terminator
        - include: rule-list

  # @supports
  # https://drafts.csswg.org/css-conditional-3/#at-supports
  at-supports:
    - match: '((@)supports)'
      captures:
        1: keyword.control.at-rule.supports.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.supports.css
        - match: '\{'
          scope: punctuation.definition.block.begin.css
          push:
            - meta_scope: meta.block.css
            - match: '(?=\})'
              pop: true
            - include: main
        - match: '\}'
          scope: meta.block.css punctuation.definition.block.end.css
          pop: true
        - include: at-supports-operators
        - include: at-supports-parens

  at-supports-operators:
    - match: '\b(?i:and|or|not)\b'
      scope: keyword.operator.logic.css

  at-supports-parens:
    - match: '\('
      scope: punctuation.definition.group.begin.css
      push:
        - meta_scope: meta.group.css
        - match: '\)'
          scope: punctuation.definition.group.end.css
          pop: true
        - include: at-supports-operators
        - include: at-supports-parens
        - include: rule-list-body

  property-list:
    - match: '(?=\{)'
      push:
        - match: '\}'
          scope: punctuation.section.property-list.css
          pop: true
        - include: rule-list

  property-value-constants:
    - match: |-
            (?x)\b(
               ({{counter_styles}})|
               (?:EndColorStr|a(?:b(?:ov|solut)e|ctive|dd(?:itive)?|fter-edge|l(?:ias|l-(?:petite-caps|s(?:croll|mall-caps))|pha(?:betic)?|ternate(?:-reverse|s)?|ways|l)|n(?:gle|notation|tialiased)|ttachment|uto(?:-pos|hiding-scrollbar)?|v(?:ailable|oid(?:-(?:column|page|region))?)|t)|b(?:a(?:ck(?:drop-filter|ground(?:-(?:color|image|position|size))?|wards)|lance|s(?:eline|is))|e(?:fore-edge|h(?:avior|ind)|low|vel)|i(?:cubic|di-override)|l(?:ink|ock(?:-(?:axis|end|line-height|start))?|ur)|o(?:ld(?:er)?|rder(?:-(?:bo(?:ttom(?:-(?:color|left-radius|r(?:ight-r)?adius|style|width))?|x)|col(?:lapse|or)|image(?:-(?:outset|repeat|s(?:li|our)ce|width))?|left(?:-(?:color|radius|style|width))?|r(?:adius|ight(?:-(?:color|radius|style|width))?)|s(?:pacing|tyle)|top(?:-(?:color|left-radius|r(?:ight-r)?adius|style|width))?|width))?|t(?:tom(?:-outside)?|h)|x-(?:decoration|image|shadow)|x)|r(?:eak-(?:all|word)|ightness)|u(?:llets|tt(?:on(?:-bevel)?)?))|c(?:a(?:p(?:italize|tion)|ret)|e(?:ll|nt(?:er(?:-(?:lef|righ)t)?|ral))|h(?:ar(?:acter-variant)?|eckbox)|ircle|jk-ideographic|l(?:ear|ip(?:-path)?|o(?:ne|se(?:-quote|st-(?:corner|side))))|o(?:de|l(?:-resize|lapse|or(?:-(?:burn|dodge|stop))?|umn(?:-(?:count|gap|r(?:everse|ule(?:-(?:color|width))?)|width)|s)?)|m(?:mon-ligatures|p(?:act|osite))|n(?:densed|sider-shifts|t(?:ain|e(?:nt(?:-box|s)?|xt(?:-menu|ual))|inuous|rast))|py|unt|ver)|r(?:isp(?:-e|E)dges|o(?:ss(?:hair)?|p))|ue-(?:after|before)|yclic)|d(?:a(?:rken|shed)|e(?:cimal|fault|nse|stination-(?:atop|in|o(?:ut|ver)))|i(?:agonal-fractions|fference|gits|s(?:abled|cretionary-ligatures|regard-shifts|tribute(?:-(?:all-lines|letter|space))?|c))|o(?:tted|uble(?:-circle)?|wn(?:lef|righ)t|t)|rop-shadow)|e(?:-resize|a(?:ch-line|s(?:e-(?:in(?:-out)?|out)|t-asian|e))|conomy|dges|l(?:ement|lips(?:is|e))|mbed|nd|venodd|w-resize|x(?:act|clu(?:de(?:-ruby)?|sion)|panded|t(?:ends|ra-(?:condens|expand)ed)))|f(?:a(?:llback|r(?:-(?:lef|righ)t|thest-(?:corner|side)?)|st(?:er)?)|i(?:l(?:l(?:-(?:available|box|opacity)|ed)|ter|l)|rst|t-content|xed)|l(?:at|ex(?:-(?:basis|direction|end|grow|s(?:hrink|tart)|wrap)|box)?|ip|o(?:od-color|w-root|w))|o(?:nt(?:-(?:s(?:ize(?:-adjust)?|tretch)|weight))?|rwards)|r(?:e(?:eze|quency)|om(?:-image)?)|ull-width)|g(?:e(?:neric-voice|o(?:metricPrecisio|rgia)n)|lyphs|r(?:a(?:bbing|dient|yscale|b)|id(?:-(?:column-gap|gap|height|row-gap))?|o(?:ove|w)))|h(?:a(?:n(?:ging|d)|rd-light)|e(?:ight|lp)|i(?:d(?:den|e)|gh(?:er|light)?|storical-(?:form|ligature)s)|orizontal(?:-tb)?|ue)|i(?:con|deograph(?:-(?:alpha|numeric|parenthesis|space)|ic)|mage|n(?:active|clude-ruby|finite|herit|itial|line(?:-(?:axis|b(?:lock|ox)|end|flex(?:box)?|grid|li(?:ne-height|st-item)|start|table))?|s(?:et|ide)|ter(?:-(?:character|ideograph|word)|sect)|vert|k)|solat(?:e-override|ion|e)|talic)|j(?:is(?:04|78|83|90)|ustify(?:-all)?)|k(?:annada|eep-all)|l(?:a(?:ndscape|rger?|st|yout)|e(?:ft(?:-side|wards)?|tter-spacing|vel)|i(?:g(?:atures|ht(?:e[nr]|ing-color))|n(?:e(?:-(?:edge|height|through)|ar(?:RGB|-gradient)?)|ing-nums|e)|st(?:-item|box|item))|o(?:cal|ose|ud|wer(?:case)?|w)|r-tb|tr|umin(?:ance|osity)|r)|m(?:a(?:in-size|n(?:datory|ipulation|ual)|r(?:gin(?:-(?:bo(?:ttom|x)|left|right|top))?|ker(?:-offset|s)?|quee)|sk(?:-(?:attachment|position|size))?|t(?:ch-(?:parent|source)|hematical)|x-(?:content|height|lines|size|width))|e(?:dium|nu(?:list(?:-(?:button|text(?:field)?))?)?|ssage-box)|i(?:ddle|n-(?:content|height|width)|ter|xed|x)|o(?:tion-(?:offset|rotation)|ve)|ultipl[ey])|n(?:-resize|arrower|e(?:-resize|arest-neighbor|sw-resize|ver|wspaper)|o(?:-(?:c(?:hange|l(?:ip|ose-quote)|o(?:mmon-ligatures|nte(?:nt|xtual)))|d(?:is(?:cretionary-ligatures|play)|rop)|historical-ligatures|open-quote|repeat|wrap)|n(?:zero|e)|rmal|t-allowed|wrap)|s-resize|um(?:bers|eric)|w(?:se)?-resize)|o(?:b(?:ject(?:-position|s)|lique)|ffset(?:-(?:after|before|end|start))?|ldstyle-nums|nce|p(?:acity|en(?:-quote)?|ti(?:mize(?:Legibility|Precision|Quality|Speed)|onal))|r(?:d(?:er|inal)|igin|naments)|ut(?:line(?:-(?:color|offset|width))?|s(?:et|ide))|ver(?:-edge|l(?:ay|ine))?)|p(?:a(?:dding(?:-(?:bo(?:ttom|x)|left|right|top))?|ge|int(?:ed)?|n(?:-(?:down|left|right|up|[xy])|ner)|use(?:-(?:after|before)|d))|e(?:rspective-origin|tite-caps)|ixelated|l(?:aintext|us-(?:dark|light)er)|o(?:inter|lygon|rtrait|sition)|r(?:e(?:-(?:line|wrap)|serve-3d)|o(?:g(?:id:DXImageTransform.Microsoft.(?:Alpha|Blur|Shadow|dropshadow|gradient)|ress(?:ive)?)|portional-(?:nums|width)|ximity)|e)|ush-button)|r(?:adi(?:al(?:-gradient)?|o)|e(?:ad-(?:only|write(?:-plaintext-only)?)|ct(?:angle|o)|gion|lative|move|p(?:eat(?:-[xy]|ing-(?:linear|radial)-gradient)?|laced)|set-size|ver(?:se|t))|i(?:dge|ght(?:-side|wards)?)|l-tb|o(?:und|w-(?:re(?:siz|vers)|severs)e|w)|tl|u(?:by(?:-(?:base(?:-container)?|container|text(?:-container)?))?|n(?:-in|ning))|l)|s(?:RGB|-resize|aturat(?:ion|e)|c(?:ale-down|r(?:een|oll(?:-(?:position|snap-(?:coordinate|destination))|bar(?:button-(?:down|left|right|up)|gripper-(?:horizont|vertic)al|t(?:humb-(?:horizont|vertic)|rack-(?:horizont|vertic))al)?)?))|e(?:-resize|archfield(?:-(?:cancel-butt|decorati|results-(?:butt|decorati))on)?|mi-(?:condens|expand)ed|p(?:arate|ia)|same)|h(?:ape-(?:image-threshold|margin|outside)|ow|rink)|i(?:deways(?:-(?:l(?:eft|r)|r(?:ight|l)))?|lent|mplified|ngle|ze)|l(?:ashed-zero|i(?:ce|de(?:r(?:-(?:horizont|vertic)|thumb-(?:horizont|vertic))al)?)|ow(?:er)?)|m(?:all(?:-cap(?:tion|s)|er)?|ooth)|nap|o(?:ft(?:-light)?|lid|urce-(?:atop|in|o(?:ut|ver)))|p(?:a(?:ce(?:-(?:around|between|evenly)|s)?|n)|e(?:cific-voice|ll-out))|quare(?:-button)?|t(?:a(?:ck(?:ed-fractions)?|rt(?:ColorStr)?|t(?:ic|us-bar))|ep-(?:end|start)|icky|op-(?:color|opacity)|r(?:etch|i(?:ct|ng)|oke(?:-(?:box|dash(?:array|offset)|miterlimit|opacity|width))?)|yl(?:eset|istic|e))|u(?:b(?:grid|pixel-antialiased|tract)|per|b)|w(?:-resize|a(?:sh|p))|ymbolic)|t(?:ab(?:le(?:-(?:c(?:aption|ell|olumn(?:-group)?)|footer-group|header-group|row(?:-group)?))?|ular-nums)|b-rl|ext(?:-(?:after-edge|b(?:efore-edge|ottom)|decoration(?:-color)?|emphasis(?:-color)?|indent|over-edge|s(?:hadow|ize(?:-adjust)?)|top|under-edge)|area|field)?|hi(?:ck|n)|itling-ca(?:ps|se)|o(?:p-outside|uch|p)|r(?:a(?:ditional|ns(?:form(?:-origin)?|parent))|iangle)|[bo])|u(?:ltra-(?:condens|expand)ed|n(?:der(?:-edge|line)?|icase|set)|p(?:left|percase|right)|se-(?:glyph-orientation|script))|v(?:er(?:so|tical(?:-(?:align|ideographic|lr|rl|text))?)|i(?:ew(?:-box|port-fill(?:-opacity)?)|sib(?:ility|le(?:Fill|Painted|Stroke)?)))|w(?:-resize|a(?:it|vy)|eight|hitespace|id(?:er|th)|ord(?:-spacing|s)|rap(?:-reverse)?)|x(?:-(?:fast|high|l(?:arge|o(?:ud|w))|s(?:low|mall|oft))|or|x-(?:large|small))|z(?:-index|ero|oom(?:-(?:in|out))?))
            )\b
      scope: support.constant.property-value.css
      # Generic Font Families: https://www.w3.org/TR/CSS2/fonts.html
    - match: \b(?i:sans-serif|serif|monospace|fantasy|cursive|system-ui)\b(?=\s*[;,\n}])
      scope: support.constant.font-name.css

  property-values:
    - include: comment-block
    - include: vendor-prefix
    - include: builtin-functions
    - include: line-names
    - include: unicode-range
    - include: numeric-values
    - include: color-values
    - include: property-value-constants
    - include: literal-string
    - match: \!\s*important
      scope: keyword.other.important.css

  rule-list-terminator:
    - match: '\s*(\})'
      captures:
        1: punctuation.section.property-list.css
      pop: true

  rule-list:
    - match: '\{'
      scope: punctuation.section.property-list.css
      push:
        - meta_scope: meta.property-list.css
        - match: '(?=\s*\})'
          pop: true
        - include: rule-list-body

  rule-list-body:
    - include: comment-block
    - match: '(?=[-a-z])'
      push:
        - meta_scope: meta.property-name.css
        - match: '$|(?![-a-z])'
          pop: true
        - include: vendor-prefix
        - match: '\b(var-)({{ident}})(?=\s)'
          scope: invalid.deprecated.custom-property.css
          captures:
            1: keyword.other.custom-property.prefix.css
            2: support.type.custom-property.name.css
        - include: custom-property-name
        - match: \bfont(-family)?(?!-)\b
          scope: support.type.property-name.css
          push:
            - match: (:)([ \t]*)
              captures:
                1: punctuation.separator.key-value.css
                2: meta.property-value.css
              push:
                - meta_content_scope: meta.property-value.css
                - match: '\s*(;)|(?=[})])'
                  captures:
                    1: punctuation.terminator.rule.css
                  pop: true
                - include: property-values
                - include: comma-delimiter
                - match: '{{ident}}(\s+{{ident}})*'
                  scope: string.unquoted.css
            - match: ''
              pop: true
        # Property names are sorted by popularity in descending order.
        # Popularity data taken from https://www.chromestatus.com/metrics/css/popularity
        - match: |-
            \b(?x)(
            (?:a(?:dditive-symbols|l(?:ign(?:-(?:content|items|self)|ment-baseline)|[lt])|nimation(?:-(?:d(?:elay|irection|uration)|fill-mode|iteration-count|name|play-state|timing-function))?|ppearance|spect-ratio|zimuth)|b(?:a(?:ck(?:drop-filter|face-visibility|ground(?:-(?:attachment|blend-mode|c(?:lip|o(?:lor|mposite))|image|origin|position(?:-[xy])?|repeat(?:-[xy])?|size))?)|seline-shift)|l(?:end-mod|ock-siz)e|o(?:rder(?:-(?:b(?:efore(?:-(?:color|style|width))?|lock-(?:end(?:-(?:color|style|width))?|start(?:-(?:color|style|width))?)|ottom(?:-(?:color|left-radius|right-radius|style|width))?)|col(?:lapse|or)|fit|horizontal-spacing|i(?:mage(?:-(?:outset|repeat|s(?:li|our)ce|width))?|nline-(?:end(?:-(?:color|style|width))?|start(?:-(?:color|style|width))?))|left(?:-(?:color|style|width))?|r(?:adius|ight(?:-(?:color|style|width))?)|s(?:pacing|tyle)|top(?:-(?:color|left-radius|right-radius|style|width))?|vertical-spacing|width))?|ttom|x-(?:align|d(?:ecoration-break|irection)|flex(?:-group)?|lines|or(?:dinal-group|ient)|pack|reflect|s(?:hadow|izing)))|reak-(?:after|before|inside)|uffered-rendering)|c(?:a(?:ption-side|ret-color)|l(?:ear|ip(?:-(?:path|rule))?)|o(?:l(?:or(?:-(?:interpolation(?:-filters)?|profile|rendering))?|umn(?:-(?:axis|break-(?:after|before|inside)|count|fill|gap|progression|rule(?:-(?:color|style|width))?|span|width)|s))|nt(?:ain|ent)|unter-(?:incremen|rese)t)|ross-fade|u(?:e-(?:after|before)|rsor(?:-visibility)?|e)|[xy])|d(?:ashboard-region|i(?:rection|splay)|ominant-baseline)|e(?:levation|mpty-cells)|f(?:allback|il(?:l-(?:opacity|rule)|ter|l)|l(?:ex(?:-(?:align|basis|direction|flow|grow|item-align|line-pack|negative|order|p(?:ack|ositive|referred-size)|shrink|wrap))?|o(?:at|od-(?:color|opacity)))|ont(?:-(?:display|f(?:amily|eature-settings)|kerning|language-override|optical-sizing|s(?:ize(?:-(?:adjust|delta))?|mooth(?:ing)?|t(?:retch|yle)|ynthesis)|varia(?:nt(?:-(?:alternates|caps|east-asian|ligatures|numeric|position))?|tion-settings)|weight))?)|g(?:ap|lyph-orientation-(?:horizont|vertic)al|rid(?:-(?:a(?:rea|uto-(?:columns|flow|rows))|column(?:-(?:end|gap|start))?|gap|row(?:-(?:end|gap|start))?|template(?:-(?:area|column|row)s)?))?)|h(?:anging-punctuation|eight|yphen(?:ate-(?:character|limit-(?:after|before|lines))|s))|i(?:con|m(?:age-(?:orientation|re(?:ndering|solution))|e-mode)|n(?:itial-letter(?:-(?:align|wrap))?|line-size|set)|solation)|justify-(?:content|items|self)|kerning|l(?:e(?:ft|tter-spacing)|i(?:ghting-color|ne-(?:b(?:ox-contain|reak)|clamp|grid|height|snap)|st-style(?:-(?:image|position|type))?)|ocale)|m(?:a(?:r(?:gin(?:-(?:after-collapse|b(?:efore-collapse|lock-(?:end|start)|ottom(?:-collapse)?)|collapse|inline-(?:end|start)|left|right|top(?:-collapse)?))?|ker(?:-(?:end|mid|offset|start))?|quee(?:-(?:direction|increment|play-count|repetition|s(?:peed|tyle)))?)|sk(?:-(?:attachment|bo(?:rder(?:-(?:mode|outset|repeat|s(?:li|our)ce|width))?|x-image(?:-(?:outset|repeat|s(?:li|our)ce|width))?)|c(?:lip|omposite)|image|mode|origin|position(?:-[xy])?|repeat(?:-[xy])?|s(?:iz|ource-typ)e|type))?|x-(?:block-size|height|inline-size|width|zoom))|i(?:n-(?:block-size|height|inline-size|width|zoom)|x-blend-mode))|n(?:av-(?:down|index|left|right|up)|bsp-mode|egative)|o(?:bject-(?:fit|position)|ffset-(?:block-(?:end|start)|inline-(?:end|start))|pacity|r(?:der|ientation|phans)|utline(?:-(?:color|offset|style|width))?|verflow(?:-(?:s(?:crolling|tyle)|wrap|[xy]))?)|p(?:a(?:dding(?:-(?:b(?:lock-(?:end|start)|ottom)|inline-(?:end|start)|left|right|top))?|ge(?:-break-(?:after|before|inside))?|int-order|use(?:-(?:after|before))?|d)|erspective(?:-origin(?:-[xy])?)?|itch(?:-range)?|la(?:ce-(?:content|items|self)|y-during)|o(?:inter-events|sition)|r(?:efix|int-color-adjust))|quotes|r(?:ange|esize|i(?:chness|ght)|o(?:tate|w-gap)|tl-ordering|uby-(?:align|merge|overhang|position|span)|[xy])|s(?:c(?:ale|roll-(?:behavior|padding(?:-(?:bottom|left|right|top))?|snap-(?:align|coordinate|destination|margin(?:-(?:bottom|left|right|top))?|points-[xy]|type(?:-[xy])?)))|hape-(?:image-threshold|margin|outside|rendering)|ize|p(?:ace-evenly|e(?:ak(?:-(?:as|header|numeral|punctuation))?|ech-rate))|rc|t(?:op-(?:color|opacity)|r(?:ess|oke(?:-(?:color|dash(?:array|offset)|line(?:cap|join)|miterlimit|opacity|width))?))|u(?:ffix|pported-color-schemes)|y(?:mbols|stem))|t(?:a(?:b(?:-size|le-layout)|p-highlight-color)|ext-(?:a(?:lign(?:-last)?|nchor)|combine(?:-upright)?|decoration(?:-(?:color|line|s(?:kip|tyle)|thickness)|s-in-effect)?|emphasis(?:-(?:color|position|style))?|fill-color|height|indent|justify|o(?:rientation|verflow)|rendering|s(?:ecurity|hadow|ize-adjust|troke(?:-(?:color|width))?)|transform|underline-(?:offset|position)|zoom)|o(?:uch-(?:action|callout)|p)|rans(?:form(?:-(?:box|origin(?:-[xyz])?|style))?|ition(?:-(?:d(?:elay|uration)|property|timing-function))?|late))|u(?:nicode-(?:bidi|range)|ser-(?:drag|modify|select|zoom))|v(?:e(?:ctor-effect|rtical-align)|isibility|o(?:ice-family|lume))|w(?:hite-space|i(?:d(?:ows|th)|ll-change)|ord-(?:break|spacing|wrap)|riting-mode)|z(?:-index|oom)|r)
            )\b
          scope: support.type.property-name.css
    - match: (:)([ \t]*) 
      captures:
        1: punctuation.separator.key-value.css
        2: meta.property-value.css
      push:
        - meta_content_scope: meta.property-value.css
        - match: '\s*(;)|(?=[})])'
          captures:
            1: punctuation.terminator.rule.css
          pop: true
        - include: property-values

  selector:
    - match: (?=[:.*#a-zA-Z\[])
      push:
        - meta_scope: meta.selector.css
        - match: '(?=[/@{)])'
          pop: true
          # Custom Elements: http://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
        - match: '\b([a-z](?:{{custom_element_chars}})*-(?:{{custom_element_chars}})*)\b'
          scope: entity.name.tag.custom.css
        - match: '\b(?:s(?:t(?:r(?:ike|ong)|yle|op)|e(?:ction|lect)|u(?:[bp]|mmary)|(?:ymbo|mal)l|cript|hadow|ource|witch|amp|pan|vg)?|t(?:e(?:xt(?:Path|area)?|mplate)|(?:i(?:tl|m)|abl)e|r(?:ack|ef)?|(?:foo)?t|h(?:ead)?|body|span|d)|f(?:i(?:g(?:caption|ure)|eldset|lter)|o(?:r(?:eignObject|m)|oter)|rame(?:set)?)|c(?:o(?:l(?:group)?|ntent|de)|a(?:ption|nvas)|i(?:rcl|t)e|lipPath)|p(?:a(?:t(?:tern|h)|ram)|oly(?:line|gon)|r(?:ogress|e)|icture)?|d(?:[dlt]|e(?:(?:tail|f)s|l)|i(?:[rv]|alog)|ata(?:list)?|fn)|a(?:r(?:ticle|ea)|cronym|ddress|pplet|side|udio|bbr)?|b(?:ase(?:font)?|lockquote|d[io]|utton|ody|ig|r)?|l(?:i(?:n(?:e(?:arGradient)?|k))?|egend|abel)|m(?:a(?:rk(?:er)?|in|sk|p)|e(?:t(?:er|a)|nu))|e(?:l(?:ement|lipse)|ventsource|m(?:bed)?)|i(?:m(?:age|g)|n(?:put|s)|sindex|frame)?|o(?:pt(?:group|ion)|(?:bjec|utpu)t|l)|h(?:[123456r]|ead(?:er)?|group|tml)|r(?:(?:adialGradien|ec)t|tc?|p)|n(?:o(?:frames|script)|av)|g(?:lyph(?:Ref)?)?|k(?:eygen|bd)|v(?:ideo|ar)|u(?:se|l)?|wbr|xmp|q)\b'
          scope: entity.name.tag.css
          # https://drafts.csswg.org/selectors-4/#class-html
        - match: '(\.){{ident}}'
          scope: entity.other.attribute-name.class.css
          captures:
            1: punctuation.definition.entity.css
          # https://drafts.csswg.org/selectors-4/#id-selectors
        - match: '(#){{ident}}'
          scope: entity.other.attribute-name.id.css
          captures:
            1: punctuation.definition.entity.css
        - match: \*
          scope: entity.name.tag.wildcard.css
          # Combinators
          # https://drafts.csswg.org/selectors-4/#combinators
          # https://drafts.csswg.org/css-scoping/#deep-combinator
        - match: '({{combinators}})(?![>~+])'
          scope: punctuation.separator.combinator.css
        - match: '({{combinators}}){2,}'
          scope: invalid.illegal.combinator.css
        - include: pseudo-elements
        - include: pseudo-classes # pseudo-classes must be included after pseudo-elements
        # Attribute Selectors
        # https://drafts.csswg.org/selectors-4/#attribute-selectors
        - match: '\['
          scope: punctuation.definition.entity.css
          push:
            - meta_scope: meta.attribute-selector.css
            - include: qualified-name
            - match: '({{ident}})'
              scope: entity.other.attribute-name.css
            - match: '\s*([~*|^$]?=)\s*'
              captures:
                1: keyword.operator.attribute-selector.css
              push:
                - match: '[^\s\]\[''"]'
                  scope: string.unquoted.css
                - include: literal-string
                - match: '(?=(\s|\]))'
                  pop: true
            - match: '(?:\s+([iI]))?'  # case insensitive flag
              captures:
                1: keyword.other.css
            - match: '\]'
              scope: punctuation.definition.entity.css
              pop: true
        - include: comma-delimiter

  # Pseudo Elements
  # https://drafts.csswg.org/selectors-4/#pseudo-elements
  pseudo-elements:
    - match: |-
        (?x:
            (:{1,2})(?:first-l(?:etter|ine)|before|after) # CSS1 & CSS2 require : or ::
          | (::)(-(?:moz|ms|webkit)-)?(?:{{ident}}) # CSS3 requires ::
        )\b
      scope: entity.other.pseudo-element.css
      captures:
        1: punctuation.definition.entity.css
        2: punctuation.definition.entity.css
        3: support.type.vendor-prefix.css

  # Pseudo Classes
  # https://drafts.csswg.org/selectors-4/#pseudo-classes
  pseudo-classes:
      # Functional Pseudo Classes
      # https://drafts.csswg.org/selectors-4/#functional-pseudo-class

      # Functional Pseudo Classes with a single unquoted string
    - match: '(:)(dir|lang)(?=\()'
      scope: entity.other.pseudo-class.css
      captures:
        1: punctuation.definition.entity.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: unquoted-string

      # Functional Pseudo Classes with selector list
    - match: '(:)(matches|not|has)(?=\()'
      scope: entity.other.pseudo-class.css
      captures:
        1: punctuation.definition.entity.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: selector

      # Special :drop() pseudo-class
    - match: '(:)(drop)(?=\()'
      scope: entity.other.pseudo-class.css
      captures:
        1: punctuation.definition.entity.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: \b(active|valid|invalid)\b
            scope: keyword.other.pseudo-class.css

      # Functional Pseudo Classes with `An+B` param
      # An+B Notation: https://drafts.csswg.org/css-syntax/#anb
      # nth-last-child(), nth-child(), nth-last-of-type(), nth-of-type()
    - match: '(:)(nth-(?:last-(?:of-type|child)|of-type|child))(?=\()'
      scope: entity.other.pseudo-class.css
      captures:
        1: punctuation.definition.entity.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: \b(even|odd)\b
            scope: keyword.other.pseudo-class.css
          - match: '([-+]?\d*(n))\s*([-+]\s*\d+)?'
            captures:
              1: constant.numeric.integer.decimal.css
              2: keyword.other.unit.css
              3: constant.numeric.integer.decimal.css
          - match: '[-+]\s+\d+n?|[-+]?\d+\s+n'
            scope: invalid.illegal.numeric.css
          - include: integer-type

      # Regular Pseudo Classes
    - match: '(:)({{ident}})'
      scope: entity.other.pseudo-class.css
      captures:
        1: punctuation.definition.entity.css

  builtin-functions:
    - include: attr-function
    - include: calc-function
    - include: cross-fade-function
    - include: filter-functions
    - include: gradient-functions
    - include: image-function
    - include: image-set-function
    - include: minmax-function
    - include: url-function
    - include: var-function
    - include: color-adjuster-functions

      # filter()
      # https://drafts.fxtf.org/filters/#funcdef-filter
    - match: '\b(filter)(?=\()'
      scope: support.function.filter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: image-type
          - include: literal-string
          - include: filter-functions

      # counter()
      # https://drafts.csswg.org/css-lists-3/#funcdef-counter
    - match: '\b(counter)(?=\()'
      scope: support.function.counter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: '({{ident}})'
            scope: entity.other.counter-name.css string.unquoted.css
          - match: '(?=,)'
            push:
              - match: '(?=\))'
                pop: true
              - include: comma-delimiter
              - match: '\b({{counter_styles}}|none)\b'
                scope: support.constant.property-value.counter-style.css

      # counters()
      # https://drafts.csswg.org/css-lists-3/#funcdef-counters
    - match: '\b(counters)(?=\()'
      scope: support.function.counter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: '({{ident}})'
            scope: entity.other.counter-name.css string.unquoted.css
          - match: '(?=,)'
            push:
              - match: '(?=\))'
                pop: true
              - include: comma-delimiter
              - include: literal-string
              - match: '\b({{counter_styles}}|none)\b'
                scope: support.constant.property-value.counter-style.css

      # symbols()
      # https://drafts.csswg.org/css-counter-styles-3/#symbols-function
    - match: '\b(symbols)(?=\()'
      scope: support.function.counter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: '\b(cyclic|numeric|alphabetic|symbolic|fixed)\b'
            scope: support.constant.symbol-type.css
          - include: comma-delimiter
          - include: literal-string
          - include: image-type

      # format()
      # https://drafts.csswg.org/css-fonts-3/#descdef-src
      # format() is also mentioned in `issue 2` at https://drafts.csswg.org/css-images-3/#issues-index
      # but does not seem to be implemented in any manner
    - match: '\b(format)(?=\()'
      scope: support.function.font-face.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: literal-string

      # local()
      # https://drafts.csswg.org/css-fonts-3/#descdef-src
    - match: '\b(local)(?=\()'
      scope: support.function.font-face.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: literal-string
          - include: unquoted-string

      # Transform Functions
      # https://www.w3.org/TR/css-transforms-1/#transform-functions

      # transform functions with comma separated <number> types
      # matrix(), scale(), matrix3d(), scale3d()
    - match: '\b(matrix3d|scale3d|matrix|scale)(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: number-type
          - include: var-function
          - include: calc-function

      # transform functions with comma separated <number> or <length> types
      # translate(), translate3d()
    - match: '\b(translate(3d)?)(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: percentage-type
          - include: length-type
          - include: number-type
          - include: var-function
          - include: calc-function

      # transform functions with a single <number> or <length> type
      # translateX(), translateY()
    - match: '\b(translate[XY])(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: percentage-type
          - include: length-type
          - include: number-type
          - include: var-function
          - include: calc-function

      # transform functions with a single <angle> type
      # rotate(), skewX(), skewY(), rotateX(), rotateY(), rotateZ()
    - match: '\b(rotate[XYZ]?|skew[XY])(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: angle-type
          - include: var-function
          - include: calc-function

      # transform functions with comma separated <angle> types
      # skew()
    - match: '\b(skew)(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: angle-type
          - include: var-function
          - include: calc-function

      # transform functions with a single <length> type
      # translateZ(), perspective()
    - match: '\b(translateZ|perspective)(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: length-type
          - include: var-function
          - include: calc-function

      # transform functions with a comma separated <number> or <angle> types
      # rotate3d()
    - match: '\b(rotate3d)(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: angle-type
          - include: number-type
          - include: var-function
          - include: calc-function

      # transform functions with a single <number> type
      # scaleX(), scaleY(), scaleZ()
    - match: '\b(scale[XYZ])(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: number-type
          - include: var-function
          - include: calc-function

      # Timing Functions
      # https://www.w3.org/TR/web-animations-1/#timing-functions

      # cubic-bezier()
      # https://www.w3.org/TR/web-animations-1/#cubic-bzier-timing-function
    - match: '\b(cubic-bezier)(?=\()'
      scope: support.function.timing.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: number-type

      # steps()
      # https://www.w3.org/TR/web-animations-1/#step-timing-function
    - match: '\b(steps)(?=\()'
      scope: support.function.timing.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: integer-type
          - match: (end|middle|start)
            scope: support.keyword.timing-direction.css

      # Shape Functions
      # https://www.w3.org/TR/css-shapes-1/#typedef-basic-shape

      # rect() - Deprecated
      # https://drafts.fxtf.org/css-masking-1/#funcdef-clip-rect
    - match: '\b(rect)(?=\()'
      scope: support.function.shape.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: \bauto\b
            scope: support.constant.property-value.css
          - include: length-type

      # inset()
      # https://www.w3.org/TR/css-shapes-1/#funcdef-inset
    - match: '\b(inset)(?=\()'
      scope: support.function.shape.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: '\bround\b'
            scope: keyword.other.css
          - include: length-type
          - include: percentage-type

      # circle()
      # https://www.w3.org/TR/css-shapes-1/#funcdef-circle
      # ellipse()
      # https://www.w3.org/TR/css-shapes-1/#funcdef-ellipse
    - match: '\b(circle|ellipse)(?=\()'
      scope: support.function.shape.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: '\bat\b'
            scope: keyword.other.css
          - match: '\b(top|right|bottom|left|center|closest-side|farthest-side)\b'
            scope: support.constant.property-value.css
          - include: length-type
          - include: percentage-type

      # polygon()
      # https://www.w3.org/TR/css-shapes-1/#funcdef-polygon
    - match: '\b(polygon)(?=\()'
      scope: support.function.shape.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - include: comment-block
          - match: '(?=\))'
            pop: true
          - match: '\b(nonzero|evenodd)\b'
            scope: support.constant.property-value.css
          - include: length-type
          - include: percentage-type
          - include: calc-function
          - include: comma-delimiter

      # toggle()
      # https://www.w3.org/TR/css3-values/#toggle-notation
    - match: '\b(toggle)(?=\()'
      scope: support.function.toggle.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: vendor-prefix
          - include: property-value-constants
          - include: numeric-values
          - include: color-values
          - include: literal-string

      # repeat()
      # https://drafts.csswg.org/css-grid/#funcdef-repeat
    - match: '\b(repeat)(?=\()'
      scope: support.function.grid.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: length-type
          - include: percentage-type
          - include: minmax-function
          - include: integer-type
          - include: var-function
          - include: line-names
          - match: \b(auto-fill|auto-fit)\b
            scope: support.keyword.repetitions.css
          - match: \b(max-content|min-content|auto)\b
            scope: support.constant.property-value.css

  # var()
  # https://drafts.csswg.org/css-variables/#funcdef-var
  var-function:
    - match: '\b(var)(?=\()'
      scope: support.function.var.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: custom-property-name

  # Filter Functions
  # https://drafts.fxtf.org/filters/#typedef-filter-function
  filter-functions:
      # blur()
      # https://drafts.fxtf.org/filters/#funcdef-filter-blur
    - match: '\b(blur)(?=\()'
      scope: support.function.filter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: length-type

      # brightness(), contrast(), grayscale(), invert(), opacity(), saturate(), sepia()
      # https://drafts.fxtf.org/filters/#funcdef-filter-brightness
    - match: '\b(brightness|contrast|grayscale|invert|opacity|saturate|sepia)(?=\()'
      scope: support.function.filter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: percentage-type
          - include: number-type

      # drop-shadow()
      # https://drafts.fxtf.org/filters/#funcdef-filter-drop-shadow
    - match: '\b(drop-shadow)(?=\()'
      scope: support.function.filter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: length-type
          - include: color-values

      # hue-rotate()
      # https://drafts.fxtf.org/filters/#funcdef-filter-hue-rotate
    - match: '\b(hue-rotate)(?=\()'
      scope: support.function.filter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: angle-type

  # calc()
  # https://www.w3.org/TR/css3-values/#funcdef-calc
  calc-function:
    - match: '\b(calc)(?=\()'
      scope: support.function.calc.css
      push:
        - meta_scope: meta.function-call.css
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push: inside-calc-parens
        - match: ''
          pop: true

  inside-calc-parens:
    - meta_scope: meta.group.css
    - match: '(?=\))'
      set: function-notation-terminator
    - include: comment-block
    - include: calc-function
    - include: var-function
    - include: numeric-values
    - include: attr-function
    - match: "[-/*+]"
      scope: keyword.operator.css
    - match: '\('
      scope: punctuation.definition.group.begin.css
      push: inside-calc-parens

  # attr()
  # https://www.w3.org/TR/css3-values/#funcdef-attr
  attr-function:
    - match: '\b(attr)(?=\()'
      scope: support.function.attr.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: qualified-name
          - include: literal-string
          - match: '({{ident}})'
            scope: entity.other.attribute-name.css
            push:
            - match: |-
                (?x)\b(
                    {{font_relative_lengths}}
                  | {{viewport_percentage_lengths}}
                  | {{absolute_lengths}}
                  | {{angle_units}}
                  | {{duration_units}}
                  | {{frequency_units}}
                  | {{resolution_units}}
                )\b
              scope: keyword.other.unit.css
            - match: '(?=\))'
              pop: true
            - include: comma-delimiter
            - include: property-value-constants
            - include: numeric-values
            - include: color-values

  # url()
  # https://drafts.csswg.org/css-images-3/#url-notation
  url-function:
    - match: '\b(url)(?=\()'
      scope: support.function.url.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: literal-string
          - include: unquoted-string

  # url-prefix()
  # https://www.w3.org/TR/2012/WD-css3-conditional-20120911/#url-prefix
  url-prefix-function:
    - match: '\b(url-prefix)(?=\()'
      scope: support.function.url-prefix.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: literal-string
          - include: unquoted-string

  # domain()
  # https://www.w3.org/TR/2012/WD-css3-conditional-20120911/#url-domain
  domain-function:
    - match: '\b(domain)(?=\()'
      scope: support.function.domain.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: literal-string
          - include: unquoted-string

  # regexp()
  # https://www.w3.org/TR/2012/WD-css3-conditional-20120911/#url-regexp
  regexp-function:
    - match: '\b(regexp)(?=\()'
      scope: support.function.regexp.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: literal-string

  # image()
  # https://drafts.csswg.org/css-images-3/#funcdef-image
  image-function:
    - match: '\b(image)(?=\()'
      scope: support.function.image.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: image-type
          - include: literal-string
          - include: color-values
          - include: comma-delimiter
          - include: unquoted-string

  # image-set()
  # https://drafts.csswg.org/css-images-3/#funcdef-image-set
  image-set-function:
    - match: '\b(image-set)(?=\()'
      scope: support.function.image.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: literal-string
          - include: color-values
          - include: comma-delimiter
          - include: resolution-type
          - include: image-type
          - match: '[0-9]+(x)'
            scope: constant.numeric.integer.decimal.css
            captures:
              1: keyword.other.unit.css
          - include: unquoted-string

  # Gradient Functions
  # https://drafts.csswg.org/css-images-3/#gradients
  gradient-functions:
      # linear-gradient()
      # https://drafts.csswg.org/css-images-3/#linear-gradients
      # repeating-linear-gradient()
      # https://drafts.csswg.org/css-images-3/#funcdef-repeating-linear-gradient
    - match: '\b((?:repeating-)?linear-gradient)(?=\()'
      scope: support.function.gradient.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: angle-type
          - include: comma-delimiter
          - include: color-values
          - include: percentage-type
          - include: length-type
          - match: '\bto\b'
            scope: keyword.other.css
          - match: \b(top|right|bottom|left)\b
            scope: support.constant.property-value.css

      # radial-gradient()
      # https://drafts.csswg.org/css-images-3/#radial-gradients
      # repeating-radial-gradient()
      # https://drafts.csswg.org/css-images-3/#funcdef-repeating-radial-gradient
    - match: '\b((?:repeating-)?radial-gradient)(?=\()'
      scope: support.function.gradient.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: color-values
          - include: percentage-type
          - include: length-type
          - match: '\b(at|circle|ellipse)\b'
            scope: keyword.other.css
          - match: |-
              (?x)\b(
                 (?:c(?:losest-(?:corner|side)|enter)|farthest-(?:corner|side)|(?:righ|lef)t|bottom|top)
              )\b
            scope: support.constant.property-value.css

      # conic-gradient()
      # https://www.w3.org/TR/css-images-4/#conic-gradients
    - match: '\b((?:repeating-)?conic-gradient)(?=\()'
      scope: support.function.gradient.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: angle-type           
          - include: comma-delimiter
          - include: color-values
          - include: percentage-type
          - include: length-type
          - match: '\b(at|from)\b'
            scope: keyword.other.css
          - match: |-
              (?x)\b(
                 (?:c(?:losest-(?:corner|side)|enter)|farthest-(?:corner|side)|(?:righ|lef)t|bottom|top)
              )\b
            scope: support.constant.property-value.css

  # cross-fade()
  # https://drafts.csswg.org/css-images-3/#cross-fade-function
  cross-fade-function:
    - match: '\b(cross-fade)(?=\()'
      scope: support.function.image.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: percentage-type
          - include: color-values
          - include: image-type
          - include: literal-string
          - include: unquoted-string

  # minmax()
  # https://drafts.csswg.org/css-grid/#valdef-grid-template-columns-minmax
  minmax-function:
    - match: '\b(minmax)(?=\()'
      scope: support.function.grid.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: length-type
          - include: percentage-type
          - match: \b(auto|max-content|min-content)\b
            scope: support.constant.property-value.css

  # Color Functions
  # https://drafts.csswg.org/css-color
  color-functions:
      # rgb(), rgba()
      # https://drafts.csswg.org/css-color/#rgb-functions
    - match: '\b(rgba?)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: percentage-type
          - include: number-type
          - include: var-function
          - include: calc-function

      # hsl(), hsla()
      # https://drafts.csswg.org/css-color/#the-hsl-notation
      # hwb() - Not yet implemented by browsers
      # https://drafts.csswg.org/css-color/#funcdef-hwb
    - match: '\b(hsla?|hwb)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: angle-type
          - include: percentage-type
          - include: number-type
          - include: var-function
          - include: calc-function

      # gray() - Not yet implemented by browsers
      # https://drafts.csswg.org/css-color/#funcdef-gray
    - match: '\b(gray)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: percentage-type
          - include: number-type
          - include: calc-function
          - include: var-function

      # device-cmyk() - Not yet implemented by browsers
      # https://drafts.csswg.org/css-color/#funcdef-device-cmyk
    - match: '\b(device-cmyk)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: color-adjuster-functions # must be included before `color-values`
          - include: color-values
          - include: percentage-type
          - include: number-type

      # color-mod() - Not yet implemented by browsers
      # https://drafts.csswg.org/css-color/#funcdef-color-mod
    - match: '\b(color)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: color-adjuster-functions # must be included before `color-values`
          - include: var-function
          - include: color-values
          - include: angle-type
          - include: number-type

  # Color Adjuster Functions - Not yet implemented by browsers
  # https://drafts.csswg.org/css-color/#typedef-color-adjuster
  color-adjuster-functions:
      # red(), green(), blue(), alpha() - Not yet implemented by browsers
    - match: '\b(red|green|blue|alpha|a)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: color-adjuster-operators
          - include: percentage-type
          - include: number-type

      # hue() - Not yet implemented by browsers
    - match: '\b(hue|h)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: color-adjuster-operators
          - include: angle-type

      # saturation(), lightness(), whiteness(), blackness() - Not yet implemented by browsers
    - match: '\b(saturation|lightness|whiteness|blackness|[slwb])(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: color-adjuster-operators
          - include: percentage-type

      # tint(), shade(), contrast() - Not yet implemented by browsers
      # contrast() interferes with the contrast() filter function;
      # therefore, it is not yet implemented here
    - match: '\b(tint|shade)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: percentage-type

      # blend(), blenda() - Not yet implemented by browsers
    - match: '\b(blenda|blend)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: '\b(rgb|hsl|hwb)\b'
            scope: keyword.other.color-space.css
          - include: color-values
          - include: percentage-type
          - include: var-function

  unicode-range:
    - match: |-
        (?xi)
            (u\+)
            ([0-9a-f?]{1,6}
            (?:(-)[0-9a-f]{1,6})?)
      scope: support.unicode-range.css
      captures:
        1: support.constant.unicode-range.prefix.css
        2: constant.codepoint-range.css
        3: punctuation.section.range.css

  # Qualified Name
  # https://drafts.csswg.org/css-namespaces-3/#css-qnames
  qualified-name:
    - match: '(?:({{ident}})|(\*))?([|])(?!=)'
      captures:
        1: entity.other.namespace-prefix.css
        2: entity.name.namespace.wildcard.css
        3: punctuation.separator.namespace.css

  # Custom Properties
  # https://drafts.csswg.org/css-variables/#typedef-custom-property-name
  custom-property-name:
    - match: '(--)({{nmchar}}+)'
      scope: support.type.custom-property.css
      captures:
        1: punctuation.definition.custom-property.css
        2: support.type.custom-property.name.css

  color-adjuster-operators:
    - match: '[\-\+*](?=\s+)'
      scope: keyword.operator.css

  comma-delimiter:
    - match: '\s*(,)\s*'
      captures:
        1: punctuation.separator.sequence.css

  vendor-prefix:
    - match: "-(?:webkit|moz|ms|o)-"
      scope: support.type.vendor-prefix.css

  function-notation-terminator:
    - match: '\)'
      scope: meta.group.css punctuation.definition.group.end.css
      pop: true

  at-rule-punctuation:
    - match: \;
      scope: punctuation.terminator.rule.css
    - match: (?=;|$)
      pop: true

  # Named Grid Lines
  # https://drafts.csswg.org/css-grid/#named-lines
  line-names:
    - match: '\['
      scope: punctuation.section.begin.css
      push:
        - match: '{{ident}}'
          scope: string.unquoted.line-name.css
        - match: '\]'
          scope: punctuation.section.end.css
          pop: true

  unquoted-string:
    - match: '[^\s''"]'
      scope: string.unquoted.css

  literal-string:
    - match: \'
      scope: punctuation.definition.string.begin.css
      push:
        - meta_scope: string.quoted.single.css
        - match: \'
          scope: punctuation.definition.string.end.css
          pop: true
        - include: string-content
    - match: \"
      scope: punctuation.definition.string.begin.css
      push:
        - meta_scope: string.quoted.double.css
        - match: \"
          scope: punctuation.definition.string.end.css
          pop: true
        - include: string-content

  string-content:
    - match: \n
      scope: invalid.illegal.newline.css
      pop: true
    - match: \\\s*\n
      scope: constant.character.escape.newline.css
    - match: \\(?:\h{1,6}|.)
      scope: constant.character.escape.css

  # https://www.w3.org/TR/css3-values/#numeric-types
  numeric-values:
    - include: dimensions
    - include: percentage-type
    - include: number-type

  float-type:
    - match: '{{float}}'
      scope: constant.numeric.float.decimal.css
      captures:
        1: punctuation.separator.decimal.css

  integer-type:
    - match: '{{integer}}'
      scope: constant.numeric.integer.decimal.css

  # Make sure `number-type` is included after any other numeric values
  # as `number-type` will consume all numeric values.
  number-type:
    - include: float-type
    - include: integer-type

  percentage-type:
    - match: '{{float}}(%)'
      scope: constant.numeric.float.decimal.css
      captures:
        1: punctuation.separator.decimal.css
        2: keyword.other.unit.css
    - match: '{{integer}}(%)'
      scope: constant.numeric.integer.decimal.css
      captures:
        1: keyword.other.unit.css

  dimensions:
    - include: angle-type
    - include: frequency-type
    - include: length-type
    - include: resolution-type
    - include: time-type

  length-type:
    - match: '{{float}}({{font_relative_lengths}}|{{viewport_percentage_lengths}}|{{absolute_lengths}})\b'
      scope: constant.numeric.float.decimal.css
      captures:
        1: punctuation.separator.decimal.css
        2: keyword.other.unit.css
    - match: '{{integer}}({{font_relative_lengths}}|{{viewport_percentage_lengths}}|{{absolute_lengths}})\b'
      scope: constant.numeric.integer.decimal.css
      captures:
        1: keyword.other.unit.css
    - match: '0\b(?!%)'
      scope: constant.numeric.integer.decimal.css

  time-type:
    - match: '{{float}}({{duration_units}})\b'
      scope: constant.numeric.float.decimal.css
      captures:
        1: punctuation.separator.decimal.css
        2: keyword.other.unit.css
    - match: '{{integer}}({{duration_units}})\b'
      scope: constant.numeric.integer.decimal.css
      captures:
        1: keyword.other.unit.css

  frequency-type:
    - match: '{{float}}({{frequency_units}})\b'
      scope: constant.numeric.float.decimal.css
      captures:
        1: punctuation.separator.decimal.css
        2: keyword.other.unit.css
    - match: '{{integer}}({{frequency_units}})\b'
      scope: constant.numeric.integer.decimal.css
      captures:
        1: keyword.other.unit.css

  resolution-type:
    - match: '{{float}}({{resolution_units}})\b'
      scope: constant.numeric.float.decimal.css
      captures:
        1: punctuation.separator.decimal.css
        2: keyword.other.unit.css
    - match: '{{integer}}({{resolution_units}})\b'
      scope: constant.numeric.integer.decimal.css
      captures:
        1: keyword.other.unit.css

  angle-type:
    - match: '{{float}}({{angle_units}})\b'
      scope: constant.numeric.float.decimal.css
      captures:
        1: punctuation.separator.decimal.css
        2: keyword.other.unit.css
    - match: '{{integer}}({{angle_units}})\b'
      scope: constant.numeric.integer.decimal.css
      captures:
        1: keyword.other.unit.css
    - match: '0\b(?!%)'
      scope: constant.numeric.integer.decimal.css

  # https://drafts.csswg.org/css-images-3/#typedef-image
  image-type:
    - include: cross-fade-function
    - include: gradient-functions
    - include: image-function
    - include: image-set-function
    - include: url-function
