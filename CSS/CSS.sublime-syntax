%YAML 1.2
---
# Derived from https://github.com/i-akhmadullin/Sublime-CSS3
name: CSS+
file_extensions:
  - css
  - css.erb
  - css.liquid
scope: source.css
variables:
  # Many variable names taken directly from https://www.w3.org/TR/css3-selectors/#lex
  unicode: '\\\h{1,6}[ \t\n\f]?'
  escape: '(?:{{unicode}}|\\[^\n\f\h])'
  nonascii: '[\p{L}\p{M}\p{S}\p{N}&&[^[:ascii:]]]'
  nmstart: '(?:[[_a-zA-Z]{{nonascii}}]|{{escape}})'
  nmchar: '(?:[[-\w]{{nonascii}}]|{{escape}})'
  ident: '(?:--{{nmchar}}+|-?{{nmstart}}{{nmchar}}*)'

  # Types
  # https://www.w3.org/TR/css3-values/#numeric-types
  integer: '(?:[-+]?\d+)'
  number: '[-+]?(?:(?:\d*\.\d+(?:[eE]{{integer}})*)|{{integer}})'

  # Units
  # https://www.w3.org/TR/css3-values/#lengths
  font_relative_lengths: '(?i:em|ex|ch|rem)'
  viewport_percentage_lengths: '(?i:vw|vh|vmin|vmax)'
  absolute_lengths: '(?i:cm|mm|q|in|pt|pc|px|fr)'
  angle_units: '(?i:deg|grad|rad|turn)'
  duration_units: '(?i:s|ms)'
  frequency_units: '(?i:Hz|kHz)'
  resolution_units: '(?i:dpi|dpcm|dppx)'

  custom_element_chars: |-
    (?x:
        [-_a-z0-9\x{00B7}]
      | \\\.
      | [\x{00C0}-\x{00D6}]
      | [\x{00D8}-\x{00F6}]
      | [\x{00F8}-\x{02FF}]
      | [\x{0300}-\x{037D}]
      | [\x{037F}-\x{1FFF}]
      | [\x{200C}-\x{200D}]
      | [\x{203F}-\x{2040}]
      | [\x{2070}-\x{218F}]
      | [\x{2C00}-\x{2FEF}]
      | [\x{3001}-\x{D7FF}]
      | [\x{F900}-\x{FDCF}]
      | [\x{FDF0}-\x{FFFD}]
      | [\x{10000}-\x{EFFFF}]
    )

  combinators: '(?:>{1,3}|[~+])'

  # Predefined Counter Styles
  # https://drafts.csswg.org/css-counter-styles-3/#predefined-counters
  counter_styles: |-
    (?xi:
        (?:l(?:ower-(?:(?:(?:norwegi|rom)a|lati)n|a(?:rmenian|lpha)|hexadecimal|greek)|ao)|c(?:jk-(?:earthly-branch|heavenly-stem|ideographic|decimal)|ambodian|ircle)|d(?:e(?:cimal(?:-leading-zero)?|vanagari)|isc(?:losure-(?:closed|open))?)|k(?:orean-han(?:ja-(?:in)?|gul-)formal|a(?:takan(?:a-iroh)?|nnad)a|hmer)|upper-(?:(?:(?:norwegi|rom)a|lati)n|a(?:rmenian|lpha)|hexadecimal|greek)|t(?:(?:rad-chinese-(?:in)?forma|ami)l|ibetan|elugu|hai)|a(?:r(?:abic-indic|menian)|sterisks)|s(?:imp-chinese-(?:in)?formal|quare)|g(?:u(?:jarat|rmukh)i|eorgian)|h(?:iragan(?:a-iroh)?a|ebrew)|m(?:alayalam|ongolian|yanmar)|japanese-(?:in)?formal|b(?:engali|ynary)|ethiopic-numeric|persian|oriya|none)
    )

contexts:
  main:
    - include: comment-block
    - include: selector
    - include: at-rules
    - include: property-list

  at-rules:
    - include: at-charset
    - include: at-counter-style
    - include: at-custom-media
    - include: at-document
    - include: at-font-face
    - include: at-import
    - include: at-keyframes
    - include: at-media
    - include: at-namespace
    - include: at-page
    - include: at-supports

  # When including `color-values` and `color-adjuster-functions`, make sure it is
  # included after the color adjustors to prevent `color-values` from consuming
  # conflicting function names & color constants such as `red`, `green`, or `blue`.
  color-values:
    - include: color-functions
      # https://www.w3.org/TR/CSS22/syndata.html#color-units
    - match: \b((?:(?:o(?:rang|liv)|purpl|whit|lim)e|(?:fuchsi|aqu)a|bl(?:ack|ue)|gr(?:een|ay)|maroon|silver|yellow|navy|teal|red))\b
      scope: support.constant.color.w3c-standard-color-name.css
      # https://www.w3.org/TR/css3-color/#svg-color
    - match: \b((?:d(?:ark(?:s(?:late(?:gr[ae]y|blue)|(?:eagree|almo)n)|g(?:r(?:e(?:en|y)|ay)|oldenrod)|o(?:r(?:ange|chid)|livegreen)|(?:turquois|blu)e|magenta|violet|khaki|cyan|red)|eep(?:skyblue|pink)|imgr[ae]y|odgerblue)|l(?:i(?:ght(?:s(?:(?:eagree|almo)n|(?:teel|ky)blue|lategr[ae]y)|g(?:r(?:e(?:en|y)|ay)|oldenrodyellow)|c(?:oral|yan)|yellow|blue|pink)|(?:megre|n)en)|a(?:vender(?:blush)?|wngreen)|emonchiffon)|m(?:edium(?:(?:aquamarin|turquois|purpl|blu)e|s(?:(?:pring|ea)green|lateblue)|(?:violetre|orchi)d)|i(?:(?:dnightblu|styros)e|ntcream)|occasin|agenta)|s(?:(?:a(?:(?:ddle|ndy)brow|lmo)|pringgree)n|late(?:gr[ae]y|blue)|ea(?:green|shell)|(?:teel|ky)blue|ienna|now)|p(?:a(?:le(?:g(?:oldenrod|reen)|turquoise|violetred)|payawhip)|e(?:achpuff|ru)|owderblue|ink|lum)|c(?:(?:h(?:artreus|ocolat)|adetblu)e|or(?:n(?:flowerblue|silk)|al)|(?:rimso|ya)n)|b(?:l(?:anchedalmond|ueviolet)|(?:isqu|eig)e|urlywood|rown)|g(?:re(?:enyellow|y)|ol(?:denro)?d|hostwhite|ainsboro)|(?:a(?:ntiquewhit|quamarin|liceblu|zur)|navajowhit)e|o(?:l(?:ivedrab|dlace)|r(?:angere|chi)d)|r(?:o(?:sybrown|yalblue)|ebeccapurple)|f(?:loralwhite|orestgreen|irebrick)|t(?:(?:urquois|histl)e|omato|an)|i(?:ndi(?:anred|go)|vory)|ho(?:neydew|tpink)|wh(?:itesmoke|eat)|yellowgreen|violet|khaki))\b
      scope: support.constant.color.w3c-extended-color-keywords.css
      # Special Color Keywords
      # https://www.w3.org/TR/css3-color/#currentcolor
      # https://www.w3.org/TR/css3-color/#transparent-def
    - match: \b((?i)currentColor|transparent)\b
      scope: support.constant.color.w3c-special-color-keyword.css
      # Hex Color
    - match: '(#)(\h{3}|\h{6})\b'
      scope: constant.other.color.rgb-value.css
      captures:
        1: punctuation.definition.constant.css
      # RGBA Hexadecimal Colors
      # https://en.wikipedia.org/wiki/RGBA_color_space#RGBA_hexadecimal_.28word-order.29
    - match: '(#)(\h{4}|\h{8})\b'
      scope: constant.other.color.rgba-value.css
      captures:
        1: punctuation.definition.constant.css

  comment-block:
    - match: /\*
      scope: punctuation.definition.comment.css
      push:
        - meta_scope: comment.block.css
        - match: \*/
          scope: punctuation.definition.comment.css
          pop: true

  at-charset:
    - match: \s*((@)charset\b)\s*
      captures:
        1: keyword.control.at-rule.charset.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.charset.css
        - include: at-rule-punctuation
        - include: literal-string

  # @counter-style
  # https://drafts.csswg.org/css-counter-styles-3/#the-counter-style-rule
  at-counter-style:
    - match: \s*((@)counter-style\b)\s+(?:(?i:\b(decimal|none)\b)|({{ident}}))?\s*(?=\{|$)
      captures:
        1: keyword.control.at-rule.counter-style.css
        2: punctuation.definition.keyword.css
        3: invalid.illegal.counter-style-name.css
        4: entity.other.counter-style-name.css
      push:
        - meta_scope: meta.at-rule.counter-style.css
        - include: comment-block
        - include: rule-list-terminator
        - include: rule-list

  at-custom-media:
    - match: (?=\s*@custom-media\b)
      push:
        - match: ;
          scope: punctuation.terminator.css
          pop: true
        - match: \s*((@)custom-media)
          captures:
            1: keyword.control.at-rule.custom-media.css
            2: punctuation.definition.keyword.css
            3: support.constant.custom-media.css
          push:
            - meta_scope: meta.at-rule.custom-media.css
            - match: \s*(?=;)
              pop: true
            - include: media-query-list

  # @document
  # https://www.w3.org/TR/2012/WD-css3-conditional-20120911/#at-document
  at-document:
    - match: '((@)document)'
      captures:
        1: keyword.control.at-rule.document.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.document.css
        - match: '\{'
          scope: punctuation.definition.block.begin.css
          push:
            - meta_scope: meta.block.css
            - match: '(?=\})'
              pop: true
            - include: main
        - match: '\}'
          scope: meta.block.css punctuation.definition.block.end.css
          pop: true
        - include: comment-block
        - include: url-function
        - include: url-prefix-function
        - include: domain-function
        - include: regexp-function
        - include: comma-delimiter

  at-font-face:
    - match: '\s*((@)font-face)\s*(?=\{|$)'
      captures:
        1: keyword.control.at-rule.font-face.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.font-face.css
        - include: comment-block
        - include: rule-list-terminator
        - include: rule-list

  at-import:
    - match: \s*((@)import\b)\s*
      captures:
        1: keyword.control.at-rule.import.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.import.css
        - include: at-rule-punctuation
        - include: literal-string
        - include: url-function
        - include: media-query-list

  # https://drafts.csswg.org/css-animations/#propdef-animation-name
  keyframe-name:
    - match: '\s*({{ident}})?'
      captures:
        1: entity.other.animation-name.css
      push:
        - match: '\s*(?:(,)|(?=[{;]))'
          captures:
            1: punctuation.definition.arbitrary-repetition.css
          pop: true

  # @keyframes
  # https://drafts.csswg.org/css-animations/#keyframes
  at-keyframes:
    - match: (?=\s*@(?:-webkit-|-moz-|-o-)?keyframes\b)
      push:
        - include: rule-list-terminator
        - match: \s*((@)(-webkit-|-moz-|-o-)?keyframes)
          captures:
            1: keyword.control.at-rule.keyframe.css
            2: punctuation.definition.keyword.css
            3: support.type.property-vendor.css
            4: support.constant.keyframe.css
          push:
            - meta_scope: meta.at-rule.keyframe.css
            - match: '\s*(?=\{)'
              pop: true
            - match: '\s*(?=[^{;])'
              push:
                - match: '\s*(?=[{;])'
                  pop: true
                - include: keyframe-name
        - match: '\s*(\{)'
          captures:
            1: punctuation.section.property-list.css
          push:
            - match: '(?=\})'
              pop: true
            - match: '\s*(?:(from|to)|((?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)(%)))\s*,?\s*'
              captures:
                1: keyword.keyframe-selector.css
                2: constant.numeric.css
                3: keyword.other.unit.css
            - include: main

  at-media:
    - match: (?=\s*@media\b)
      push:
        - include: rule-list-terminator
        - match: \s*((@)media)
          captures:
            1: keyword.control.at-rule.media.css
            2: punctuation.definition.keyword.css
            3: support.constant.media.css
          push:
            - meta_scope: meta.at-rule.media.css
            - match: '\s*(?=\{)'
              pop: true
            - include: media-query-list
        - match: '\s*(\{)'
          captures:
            1: punctuation.section.property-list.css
          push:
            - match: '(?=\})'
              pop: true
            - include: main

  media-query:
    # Media Types: https://www.w3.org/TR/CSS21/media.html
    - include: comment-block
    - match: \b(?i:all|aural|braille|embossed|handheld|print|projection|screen|speech|tty|tv)\b
      scope: support.constant.media.css
    - match: '\b(?i:and|or|not|only)\b'
      scope: keyword.operator.logic.media.css
    - match: ','
      scope: punctuation.definition.arbitrary-repetition.css
    - match: \(
      scope: punctuation.definition.group.begin.css
      push:
        - match: \)
          scope: punctuation.definition.group.end.css
          pop: true
        - include: comment-block
        - match: |-
            (?x)
            (
                (-webkit-|-o-)?
                ((min|max)-)?
                (-moz-)?
                (
                    ((device-)?(height|width|aspect-ratio|pixel-ratio))|
                    (color(-index)?)|monochrome|resolution
                )
            )|grid|scan|orientation
            \s*(?=[:)])
          captures:
            0: support.type.property-name.media.css
            2: support.type.vendor-prefix.css
            5: support.type.vendor-prefix.css
          push:
            - match: (:)|(?=\))
              captures:
                1: punctuation.separator.key-value.css
              pop: true
        - match: \b(portrait|landscape|progressive|interlace)
          scope: support.constant.property-value.css
        - match: \s*(\d+)(/)(\d+)
          captures:
            1: constant.numeric.css
            2: keyword.operator.arithmetic.css
            3: constant.numeric.css
        - include: numeric-values

  media-query-list:
    - match: '\s*(?=[^{;])'
      push:
        - match: '\s*(?=[{;])'
          pop: true
        - include: media-query

  # @namespace
  # https://www.w3.org/TR/css3-namespace/
  at-namespace:
    - match: '\s*((@)namespace)\s+({{ident}}(?!{{nmchar}}|\())?'
      captures:
        1: keyword.control.at-rule.namespace.css
        2: punctuation.definition.keyword.css
        3: entity.other.namespace-prefix.css
      push:
        - meta_scope: meta.at-rule.namespace.css
        - include: at-rule-punctuation
        - include: literal-string
        - include: url-function
        - include: comment-block

  # @page
  # https://www.w3.org/TR/CSS2/page.html
  at-page:
    - match: '\s*((@)page)\s*(?:(:)(first|left|right))?\s*(?=\{|$)'
      captures:
        1: keyword.control.at-rule.page.css
        2: punctuation.definition.keyword.css
        3: punctuation.definition.entity.css
        4: entity.other.pseudo-class.css
      push:
        - meta_scope: meta.at-rule.page.css
        - include: comment-block
        - include: rule-list-terminator
        - include: rule-list

  # @supports
  # https://drafts.csswg.org/css-conditional-3/#at-supports
  at-supports:
    - match: '((@)supports)'
      captures:
        1: keyword.control.at-rule.supports.css
        2: punctuation.definition.keyword.css
      push:
        - meta_scope: meta.at-rule.supports.css
        - match: '\{'
          scope: punctuation.definition.block.begin.css
          push:
            - meta_scope: meta.block.css
            - match: '(?=\})'
              pop: true
            - include: rule-list-body
            - include: main
        - match: '\}'
          scope: meta.block.css punctuation.definition.block.end.css
          pop: true
        - include: at-supports-operators
        - include: at-supports-parens

  at-supports-operators:
    - match: '\b(?i:and|or|not)\b'
      scope: keyword.operator.logic.css

  at-supports-parens:
    - match: '\('
      scope: punctuation.definition.group.begin.css
      push:
        - meta_scope: meta.group.css
        - match: '\)'
          scope: punctuation.definition.group.end.css
          pop: true
        - include: at-supports-operators
        - include: at-supports-parens
        - include: rule-list-body

  property-list:
    - match: '(?=\{)'
      push:
        - match: '\}'
          scope: punctuation.section.property-list.css
          pop: true
        - include: rule-list

  property-value-constants:
    - match: |-
            (?x)\b(
                   (?:s(?:t(?:r(?:oke(?:-(?:dash(?:offset|array)|miterlimit|opacity|width|box))?|i(?:ng |ct)|etch)|a(?:ck(?:ed-fractions)?|rt(?:ColorStr)?|t(?:us-bar|ic))|yl(?:e(?:set)?|istic)|op-(?:opacity|color)|ep-(?:start|end)|icky)|c(?:r(?:oll(?:bar(?:(?:t(?:humb|rack)|gripper)-(?:horizont|vertic)al|button-(?:(?:righ|lef)t|down|up))?|-(?:snap-(?:destination|coordinate)|position))?|een)|ale-down)|e(?:archfield(?:-(?:results-(?:decorati|butt)|cancel-butt|decorati)on)?|mi-(?:condens|expand)ed|(?:-resiz|sam)e|p(?:arate|ia))|l(?:i(?:de(?:r(?:thumb)?-(?:horizont|vertic)al)?|ce)|ashed-zero|ow(?:er)?)|p(?:a(?:ce(?:-(?:between|around|evenly)|s)?|n)|e(?:cific-voice|ll-out))|i(?:deways(?:-(?:r(?:ight|l)|l(?:eft|r)))?|(?:ngl|z)e|mplified|lent)|h(?:ape-(?:image-threshold|outside|margin)|rink|ow)|o(?:urce-(?:o(?:ver|ut)|atop|in)|f(?:t-ligh)?t|lid)|u(?:b(?:(?:pixel-antialiase|gri)d|tract)?|per)|m(?:all(?:-cap(?:tion|s)|er)?|ooth)|w(?:a(?:sh|p)|-resize)|quare(?:-button)?|aturat(?:ion|e)|-resize|ymbolic|RGB|nap)|b(?:o(?:rder(?:-(?:bo(?:ttom(?:-(?:(?:(?:right-)?|left-)radius|color|style|width))?|x)|top(?:-(?:(?:(?:right-)?|left-)radius|color|style|width))?|image(?:-(?:(?:outse|repea)t|s(?:our|li)ce|width))?|r(?:ight(?:-(?:radius|color|style|width))?|adius)|left(?:-(?:radius|color|style|width))?|s(?:pacing|tyle)|col(?:lapse|or)|width))?|x(?:-(?:decoration|shadow|image))?|t(?:tom(?:-outside)?|h)|ld(?:er)?)|a(?:ck(?:ground(?:-(?:(?:imag|siz)e|position|color))?|drop-filter|wards)|s(?:eline|is)|lance)|l(?:ock(?:-(?:(?:line-heigh|star)t|axis|end))?|ink|ur)|e(?:h(?:avior|ind)|fore-edge|low|vel)|u(?:tt(?:on(?:-bevel)?)?|llets)|r(?:eak-(?:word|all)|ightness)|i(?:di-override|cubic))|c(?:o(?:l(?:umn(?:-(?:r(?:ule(?:-(?:color|width))?|everse)|count|width|gap)|s)?|or(?:-(?:dodge|burn|stop))?|(?:-resiz|laps)e)|n(?:t(?:e(?:xt(?:-menu|ual)|nt(?:-box|s)?)|inuous|rast|ain)|sider-shifts|densed)|m(?:p(?:osite|act)|mon-ligatures)|unt|ver|de|py)|l(?:o(?:se(?:st-(?:corner|side)|-quote)|ne)|ip(?:-path)?|ear)|e(?:nt(?:er(?:-(?:righ|lef)t)?|ral)|ll)|r(?:o(?:ss(?:hair)?|p)|isp(?:-e|E)dges)|h(?:ar(?:acter-variant)?|eckbox)|a(?:p(?:italize|tion)|ret)|(?:jk-ideograph|ycl)ic|ue-(?:before|after)|ircle)|p(?:r(?:o(?:g(?:id:DXImageTransform.Microsoft.(?:(?:drops|S)hadow|gradient|Alpha|Blur)|ress(?:ive)?)|portional-(?:width|nums)|ximity)|e(?:-(?:line|wrap)|serve-3d)?)|a(?:dding(?:-(?:(?:righ|lef)t|bo(?:ttom|x)|top))?|n(?:-(?:[xy]|(?:righ|lef)t|down|up)|ner)|use(?:-(?:before|after)|d)|int(?:ed)?|ge)|l(?:us-(?:light|dark)er|aintext)|o(?:(?:siti|lyg)on|rtrait|inter)|e(?:rspective-origin|tite-caps)|ush-button|ixelated)|m(?:a(?:r(?:gin(?:-(?:(?:righ|lef)t|bo(?:ttom|x)|top))?|ker(?:-offset|s)?|quee)|x-(?:(?:conten|heigh)t|lines|width|size)|sk(?:-(?:attachment|position|size))?|t(?:ch-(?:parent|source)|hematical)|n(?:ipulation|datory|ual)|in-size)|e(?:nu(?:list(?:-(?:text(?:field)?|button))?)?|ssage-box|dium)|i(?:n-(?:(?:conten|heigh)t|width)|x(?:ed)?|ddle|ter)|o(?:tion-(?:rotation|offset)|ve)|ultipl[ey])|t(?:ext(?:-(?:s(?:ize(?:-adjust)?|hadow)|(?:aft|und|ov)er-edge|b(?:efore-edge|ottom)|decoration(?:-color)?|emphasis(?:-color)?|indent|top)|field|area)?|ab(?:le(?:-(?:c(?:olumn(?:-group)?|aption|ell)|(?:foot|head)er-group|row(?:-group)?))?|ular-nums)|r(?:a(?:ns(?:form(?:-origin)?|parent)|ditional)|iangle)|o(?:p(?:-outside)?|uch)?|itling-ca(?:ps|se)|hi(?:ck|n)|b(?:-rl)?)|r(?:e(?:p(?:eat(?:ing-(?:linear|radial)-gradient|-[xy])?|laced)|ad-(?:write(?:-plaintext-only)?|only)|(?:(?:lati|mo)v|set-siz)e|ct(?:angle|o)|ver(?:se|t)|gion)|u(?:by(?:-(?:base(?:-container)?|text(?:-container)?|container))?|n(?:ning|-in))|o(?:w(?:-(?:re(?:vers|siz)|severs)e)?|und)|i(?:ght(?:-side|wards)?|dge)|adi(?:al(?:-gradient)?|o)|l(?:-tb)?|tl)|f(?:l(?:ex(?:-(?:s(?:hrink|tart)|direction|basis|grow|wrap|end)|box)?|o(?:w(?:-root)?|od-color)|at|ip)|i(?:l(?:l(?:-(?:available|opacity|box)|ed)?|ter)|(?:t-conten|rs)t|xed)|a(?:r(?:thest-(?:corner|side)?|-(?:righ|lef)t)|st(?:er)?|llback)|o(?:nt(?:-(?:s(?:ize(?:-adjust)?|tretch)|weight))?|rwards)|r(?:e(?:quency|eze)|om(?:-image)?)|ull-width)|i(?:n(?:line(?:-(?:li(?:ne-height|st-item)|b(?:lock|ox)|fle(?:xbo)?x|(?:gri|en)d|start|table|axis))?|ter(?:-(?:character|ideograph|word)|sect)|(?:activ|finit)e|(?:heri|ver)t|s(?:ide|et)|clude-ruby|itial|k)|deograph(?:-(?:parenthesis|numeric|alpha|space)|ic)|solat(?:(?:e-overrid)?e|ion)|talic|mage|con)|n(?:o(?:-(?:c(?:o(?:nte(?:xtual|nt)|mmon-ligatures)|l(?:ose-quote|ip)|hange)|d(?:is(?:cretionary-ligatures|play)|rop)|historical-ligatures|open-quote|repeat|wrap)|n(?:zero|e)|t-allowed|rmal|wrap)|e(?:(?:arest-neighbo|(?:wspap|v)e)r|(?:sw)?-resize)|(?:w(?:se)?|s)?-resize|um(?:bers|eric)|arrower)|o(?:p(?:ti(?:mize(?:(?:Legibi|Qua)lity|Precision|Speed)|onal)|en(?:-quote)?|acity)|ut(?:line(?:-(?:offset|color|width))?|s(?:ide|et))|ffset(?:-(?:before|after|start|end))?|b(?:ject(?:-position|s)|lique)|r(?:d(?:inal|er)|naments|igin)|ver(?:l(?:ine|ay)|-edge)?|ldstyle-nums|nce)|a(?:l(?:l(?:-(?:s(?:mall-caps|croll)|petite-caps))?|ternate(?:-reverse|s)?|pha(?:betic)?|(?:way|ia)s)|v(?:oid(?:-(?:(?:colum|regio)n|page))?|ailable)|(?:b(?:solut|ov)|fter-edg|ctiv)e|uto(?:hiding-scrollbar|-pos)?|n(?:tialiased|notation|gle)|(?:ttachmen)?t|dd(?:itive)?)|d(?:i(?:s(?:tribute(?:-(?:all-lines|letter|space))?|c(?:retionary-ligatures)?|regard-shifts|abled)|(?:agonal-fraction|git)s|fference)|e(?:stination-(?:o(?:ver|ut)|atop|in)|cimal|fault|nse)|o(?:ub(?:le-circ)?le|wn(?:righ|lef)t|t(?:ted)?)|a(?:rken|shed)|rop-shadow)|l(?:i(?:n(?:e(?:-(?:through|height|edge)|ar(?:-gradient|RGB)?)?|ing-nums)|g(?:ht(?:ing-color|e[nr])|atures)|st(?:-?item|box))|e(?:ft(?:-side|wards)?|tter-spacing|vel)|o(?:w(?:er(?:case)?)?|cal|ose|ud)|a(?:(?:you|s)t|ndscape|rger?)|umin(?:osity|ance)|r(?:-tb)?|tr)|e(?:x(?:t(?:ra-(?:condens|expand)ed|ends)|clu(?:de(?:-ruby)?|sion)|panded|act)|a(?:s(?:e(?:-(?:in(?:-out)?|out))?|t-asian)|ch-line)|l(?:lips(?:is|e)|ement)|(?:venod|mbe|n)d|w?-resize|conomy|dges)|g(?:r(?:id(?:-(?:(?:(?:column|row)-)?gap|height))?|a(?:b(?:bing)?|yscale|dient)|o(?:ove|w))|e(?:o(?:metricPrecisio|rgia)n|neric-voice)|lyphs)|v(?:i(?:sib(?:le(?:Painted|Stroke|Fill)?|ility)|ew(?:port-fill(?:-opacity)?|-box))|er(?:tical(?:-(?:ideographic|align|text|lr|rl))?|so))|u(?:n(?:der(?:(?:-edg|lin)e)?|icase|set)|se-(?:glyph-orientation|script)|p(?:(?:righ|lef)t|percase)|ltra-(?:condens|expand)ed)|h(?:i(?:storical-(?:ligature|form)s|gh(?:light|er)?|d(?:den|e))|a(?:n(?:ging|d)|rd-light)|orizontal(?:-tb)?|e(?:ight|lp)|ue)|w(?:(?:hitespac|-resiz)e|ord(?:-spacing|s)|eight(?: style)?|rap(?:-reverse)?|id(?:er|th)|a(?:it|vy))|x(?:-(?:l(?:o(?:ud|w)|arge)|s(?:mall|low|oft)|fast|high)|x-(?:large|small)|or)|j(?:is(?:04|78|83|90)|ustify(?:-all)?)|z(?:oom(?:-(?:out|in))?|-index|ero)|k(?:eep-all|annada)|EndColorStr)
                 | ({{counter_styles}})
            )\b
      scope: support.constant.property-value.css
      # Generic Font Families: https://www.w3.org/TR/CSS2/fonts.html
    - match: \b(?i:sans-serif|serif|monospace|fantasy|cursive|system-ui)\b(?=\s*[;,\n}])
      scope: support.constant.font-name.css

  property-values:
    - include: comment-block
    - include: vendor-prefix
    - include: builtin-functions
    - include: unicode-range
    - include: numeric-values
    - include: color-values
    - include: property-value-constants
    - include: literal-string
    - match: \!\s*important
      scope: keyword.other.important.css

  rule-list-terminator:
    - match: '\s*(\})'
      captures:
        1: punctuation.section.property-list.css
      pop: true

  rule-list:
    - match: '\{'
      scope: punctuation.section.property-list.css
      push:
        - meta_scope: meta.property-list.css
        - match: '(?=\s*\})'
          pop: true
        - include: rule-list-body

  rule-list-body:
    - include: comment-block
    - match: "(?=[-a-z])"
      push:
        - meta_scope: meta.property-name.css
        - match: "$|(?![-a-z])"
          pop: true
        - include: vendor-prefix
        - match: '\b(var-)({{ident}})(?=\s)'
          scope: invalid.deprecated.custom-property.css
          captures:
            1: keyword.other.custom-property.prefix.css
            2: support.type.custom-property.name.css
        - include: custom-property-name
        - match: \bfont(-family)?(?!-)\b
          scope: support.type.property-name.css
          push:
            - match: (:)([ \t]*)
              captures:
                1: punctuation.separator.key-value.css
                2: meta.property-value.css
              push:
                - meta_content_scope: meta.property-value.css
                - match: '\s*(;)|(?=[})])'
                  captures:
                    1: punctuation.terminator.rule.css
                  pop: true
                - include: property-values
                - match: '{{ident}}(\s+{{ident}})*'
                  scope: string.unquoted.css
                - match: ','
                  scope: punctuation.separator.css
            - match: ''
              pop: true
        # Property names are sorted by popularity in descending order.
        # Popularity data taken from https://www.chromestatus.com/metrics/css/popularity
        - match: |-
            \b(?x)(
                (?:b(?:o(?:rder(?:-(?:b(?:lock-(?:start(?:-(?:color|style|width))?|end(?:-(?:color|style|width))?)|ottom(?:-(?:(?:righ|lef)t-radius|color|style|width))?|efore(?:-(?:color|style|width))?)|i(?:nline-(?:start(?:-(?:color|style|width))?|end(?:-(?:color|style|width))?)|mage(?:-(?:(?:outse|repea)t|s(?:our|li)ce|width))?)|top(?:-(?:(?:righ|lef)t-radius|color|style|width))?|r(?:ight(?:-(?:color|style|width))?|adius)|left(?:-(?:color|style|width))?|(?:horizont|vertic)al-spacing|s(?:pacing|tyle)|col(?:lapse|or)|width))?|x-(?:d(?:ecoration-break|irection)|or(?:dinal-group|ient)|s(?:hadow|izing)|flex(?:-group)?|reflect|align|lines|pack)|ttom)|a(?:ck(?:ground(?:-(?:c(?:o(?:mposite|lor)|lip)|(?:blend-mod|imag|siz)e|position(?:-[xy])?|repeat(?:-[xy])?|attachment|origin))?|face-visibility|drop-filter)|seline-shift)|reak-(?:(?:befor|insid)e|after)|l(?:end-mod|ock-siz)e)|t(?:ext-(?:s(?:troke(?:-(?:color|width))?|ize-adjust|hadow)|decoration(?:-(?:s(?:tyle|kip)|color|line))?|emphasis(?:-(?:position|color|style))?|(?:(?:combine-upr|he)igh|inden)t|a(?:lign(?:-last)?|nchor)|o(?:rientation|verflow)|underline-position|fill-color|rendering|transform|justify)|rans(?:ition(?:-(?:d(?:uration|elay)|timing-function|property))?|form(?:-(?:origin(?:-[xyz])?|style|box))?|late)|a(?:b(?:le-layout|-size)|p-highlight-color)|o(?:uch-(?:callout|action)|p))|f(?:ont(?:-(?:varia(?:nt(?:-(?:(?:(?:alternat|ligatur)e|cap)s|(?:east-asia|positio)n|numeric))?|tion-settings)|s(?:ize(?:-adjust)?|t(?:retch|yle)|mooth(?:ing)?|ynthesis)|f(?:eature-settings|amily)|(?:optical-siz|kern)ing|language-override|display|weight))?|l(?:ex(?:-(?:p(?:(?:referred-siz|ositiv)e|ack)|(?:(?:item-)?alig|directio)n|(?:line-pac|shrin)k|(?:fl|gr)ow|negative|basis|order|wrap))?|o(?:od-(?:opacity|color)|at))|il(?:l(?:-(?:opacity|rule))?|ter)|allback)|m(?:a(?:r(?:gin(?:-(?:b(?:lock-(?:start|end)|ottom)|inline-(?:start|end)|(?:righ|lef)t|top))?|quee-(?:s(?:peed|tyle)|play-count|direction)|ker(?:-(?:(?:offse|star)t|(?:en|mi)d))?)|sk(?:-(?:bo(?:rder(?:-(?:(?:s(?:our|li)c|mod)e|(?:outse|repea)t|width))?|x-image)|(?:imag|mod|siz|typ)e|(?:attachmen|repea)t|position(?:-[xy])?|c(?:omposite|lip)|origin))?|x-(?:(?:inline|block)-size|height|width|zoom))|i(?:n-(?:(?:inline|block)-size|height|width|zoom)|x-blend-mode))|s(?:t(?:r(?:oke(?:-(?:dash(?:offset|array)|line(?:join|cap)|miterlimit|opacity|width))?|ess)|op-color)|c(?:roll-(?:snap-(?:(?:destinatio|alig)n|type(?:-[xy])?|points-[xy]|coordinate)|behavior)|ale)|p(?:e(?:ak(?:-(?:punctuation|numeral|header|as))?|ech-rate)|ace-evenly)|hape-(?:image-threshold|rendering|outside|margin)|y(?:mbols|stem)|uffix|ize|rc)|c(?:o(?:l(?:umn(?:-(?:break-(?:(?:befor|insid)e|after)|rule(?:-(?:color|style|width))?|count|width|fill|span|gap)|s)|or(?:-(?:interpolation(?:-filters)?|rendering|profile))?)|unter-(?:incremen|rese)t|nt(?:ain|ent))|u(?:e(?:-(?:before|after))?|rsor)|l(?:ip(?:-(?:path|rule))?|ear)|(?:aption-si|ross-fa)de)|p(?:a(?:d(?:ding(?:-(?:b(?:lock-(?:start|end)|ottom)|inline-(?:start|end)|(?:righ|lef)t|top))?)?|ge(?:-break-(?:(?:befor|insid)e|after))?|use(?:-(?:before|after))?|int-order)|erspective(?:-origin(?:-[xy])?)?|o(?:inter-events|sition)|la(?:y-during|ce-self)|itch(?:-range)?|refix)|a(?:nimation(?:-(?:(?:play-stat|fill-mod|nam)e|d(?:(?:irec|ura)tion|elay)|iteration-count|timing-function))?|l(?:[lt]|ign(?:-(?:content|items|self)|ment-baseline))|dditive-symbols|ppearance|zimuth)|o(?:ffset-(?:inline-(?:start|end)|block-(?:start|end))|verflow(?:-(?:[xy]|s(?:crolling|tyle)|wrap))?|utline(?:-(?:offset|color|style|width))?|r(?:ientation|phans|der)|bject-(?:position|fit)|pacity)|grid(?:-(?:a(?:uto-(?:(?:column|row)s|flow)|rea)|template(?:-(?:column|area|row)s)?|column(?:-(?:start|end|gap))?|row(?:-(?:start|end|gap))?|gap))?|l(?:i(?:ne-(?:b(?:ox-contain|reak)|height|clamp)|st-style(?:-(?:(?:imag|typ)e|position))?|ghting-color)|e(?:tter-spacing|ft))|i(?:m(?:age-(?:re(?:solution|ndering)|orientation)|e-mode)|n(?:itial-letter(?:-(?:align|wrap))?|line-size)|(?:solati|c)on)|r(?:uby-(?:(?:positio|alig|spa)n|overhang|merge)|(?:esiz|otat|ang)e|i(?:chness|ght)|tl-ordering)|w(?:i(?:d(?:ows|th)|ll-change)|ord-(?:spacing|break|wrap)|(?:riting-mod|hite-spac)e)|n(?:av-(?:(?:righ|lef)t|index|down|up)|(?:bsp-mod|egativ)e)|u(?:ser-(?:modify|select|drag|zoom)|nicode-(?:range|bidi))|d(?:i(?:rection|splay)|ominant-baseline|ashboard-region)|v(?:o(?:ice-family|lume)|ertical-align|isibility)|justify-(?:content|items|self)|e(?:mpty-cells|levation)|h(?:yphens|eight)|z(?:-index|oom)|kerning|quotes)
            )\b
          scope: support.type.property-name.css
    - match: (:)([ \t]*)
      captures:
        1: punctuation.separator.key-value.css
        2: meta.property-value.css
      push:
        - meta_content_scope: meta.property-value.css
        - match: '\s*(;)|(?=[})])'
          captures:
            1: punctuation.terminator.rule.css
          pop: true
        - include: property-values

  selector:
    - match: '\s*(?=[:.*#a-zA-Z\[])'
      push:
        - meta_scope: meta.selector.css
        - match: "(?=[/@{)])"
          pop: true
          # Custom Elements: http://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
        - match: '\b([a-z](?:{{custom_element_chars}})*-(?:{{custom_element_chars}})*)\b'
          scope: entity.name.tag.custom.css
        - match: '\b(?:s(?:t(?:r(?:ike|ong)|yle|op)|e(?:ction|lect)|u(?:[bp]|mmary)|(?:ymbo|mal)l|cript|hadow|ource|witch|amp|pan|vg)?|t(?:e(?:xt(?:Path|area)?|mplate)|(?:i(?:tl|m)|abl)e|r(?:ack|ef)?|(?:foo)?t|h(?:ead)?|body|span|d)|f(?:i(?:g(?:caption|ure)|eldset|lter)|o(?:r(?:eignObject|m)|oter)|rame(?:set)?)|c(?:o(?:l(?:group)?|ntent|de)|a(?:ption|nvas)|i(?:rcl|t)e|lipPath)|p(?:a(?:t(?:tern|h)|ram)|oly(?:line|gon)|r(?:ogress|e)|icture)?|d(?:[dlt]|e(?:(?:tail|f)s|l)|i(?:[rv]|alog)|ata(?:list)?|fn)|a(?:r(?:ticle|ea)|cronym|ddress|pplet|side|udio|bbr)?|b(?:ase(?:font)?|lockquote|d[io]|utton|ody|ig|r)?|l(?:i(?:n(?:e(?:arGradient)?|k))?|egend|abel)|m(?:a(?:rk(?:er)?|in|sk|p)|e(?:t(?:er|a)|nu))|e(?:l(?:ement|lipse)|ventsource|m(?:bed)?)|i(?:m(?:age|g)|n(?:put|s)|sindex|frame)?|o(?:pt(?:group|ion)|(?:bjec|utpu)t|l)|h(?:[123456r]|ead(?:er)?|group|tml)|r(?:(?:adialGradien|ec)t|tc?|p)|n(?:o(?:frames|script)|av)|g(?:lyph(?:Ref)?)?|k(?:eygen|bd)|v(?:ideo|ar)|u(?:se|l)?|wbr|xmp|q)\b'
          scope: entity.name.tag.css
          # https://drafts.csswg.org/selectors-4/#class-html
        - match: '(\.){{ident}}'
          scope: entity.other.attribute-name.class.css
          captures:
            1: punctuation.definition.entity.css
          # https://drafts.csswg.org/selectors-4/#id-selectors
        - match: "(#){{ident}}"
          scope: entity.other.attribute-name.id.css
          captures:
            1: punctuation.definition.entity.css
        - match: \*
          scope: entity.name.tag.wildcard.css
          # Combinators
          # https://drafts.csswg.org/selectors-4/#combinators
          # https://drafts.csswg.org/css-scoping/#deep-combinator
        - match: '({{combinators}})(?![>~+])'
          scope: punctuation.separator.combinator.css
        - match: '({{combinators}}){2,}'
          scope: invalid.illegal.combinator.css
        - include: pseudo-elements
        - include: pseudo-classes # pseudo-classes must be included after pseudo-elements
        # Attribute Selectors
        # https://drafts.csswg.org/selectors-4/#attribute-selectors
        - match: '\['
          scope: punctuation.definition.entity.css
          push:
            - meta_scope: meta.attribute-selector.css
            - include: qualified-name
            - match: '({{ident}})'
              scope: entity.other.attribute-name.css
            - match: '\s*([~*|^$]?=)\s*'
              captures:
                1: keyword.operator.attribute-selector.css
              push:
                - match: '[^\s\]\[''"]'
                  scope: string.unquoted.css
                - include: literal-string
                - match: '(?=(\s|\]))'
                  pop: true
            - match: '(?:\s+([iI]))?'  # case insensitive flag
              captures:
                1: keyword.other.css
            - match: '\]'
              scope: punctuation.definition.entity.css
              pop: true

  # Pseudo Elements
  # https://drafts.csswg.org/selectors-4/#pseudo-elements
  pseudo-elements:
    - match: |-
        (?x:
            (:{1,2})(?:first-l(?:etter|ine)|before|after) # CSS1 & CSS2 require : or ::
          | (::)(-(?:moz|ms|webkit)-)?(?:{{ident}}) # CSS3 requires ::
        )\b
      scope: entity.other.pseudo-element.css
      captures:
        1: punctuation.definition.entity.css
        2: punctuation.definition.entity.css
        3: support.type.vendor-prefix.css

  # Pseudo Classes
  # https://drafts.csswg.org/selectors-4/#pseudo-classes
  pseudo-classes:
      # Functional Pseudo Classes
      # https://drafts.csswg.org/selectors-4/#functional-pseudo-class

      # Functional Pseudo Classes with a single unquoted string
    - match: '(:)(dir|lang)(?=\()'
      scope: entity.other.pseudo-class.css
      captures:
        1: punctuation.definition.entity.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: unquoted-string

      # Functional Pseudo Classes with selector list
    - match: '(:)(matches|not|has)(?=\()'
      scope: entity.other.pseudo-class.css
      captures:
        1: punctuation.definition.entity.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: selector

      # Special :drop() pseudo-class
    - match: '(:)(drop)(?=\()'
      scope: entity.other.pseudo-class.css
      captures:
        1: punctuation.definition.entity.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: \b(active|valid|invalid)\b
            scope: keyword.other.pseudo-class.css

      # Functional Pseudo Classes with `An+B` param
      # An+B Notation: https://drafts.csswg.org/css-syntax/#anb
      # nth-last-child(), nth-child(), nth-last-of-type(), nth-of-type()
    - match: '(:)(nth-(?:last-(?:of-type|child)|of-type|child))(?=\()'
      scope: entity.other.pseudo-class.css
      captures:
        1: punctuation.definition.entity.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: \b(even|odd)\b
            scope: keyword.other.pseudo-class.css
          - match: '(?:[-+]?(?:\d+)?(n)(\s*[-+]\s*\d+)?|[-+]?\s*\d+)'
            scope: constant.numeric.css
            captures:
              1: keyword.other.unit.css

      # Regular Pseudo Classes
    - match: '(:)({{ident}})'
      scope: entity.other.pseudo-class.css
      captures:
        1: punctuation.definition.entity.css

  builtin-functions:
    - include: attr-function
    - include: calc-function
    - include: cross-fade-function
    - include: filter-functions
    - include: gradient-functions
    - include: image-function
    - include: image-set-function
    - include: minmax-function
    - include: url-function
    - include: var-function
    - include: color-adjuster-functions

      # filter()
      # https://drafts.fxtf.org/filters/#funcdef-filter
    - match: '\b(filter)(?=\()'
      scope: support.function.filter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: image-type
          - include: literal-string
          - include: filter-functions

      # counter()
      # https://drafts.csswg.org/css-lists-3/#funcdef-counter
    - match: '\b(counter)(?=\()'
      scope: support.function.counter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: '({{ident}})'
            scope: entity.other.counter-name.css string.unquoted.css
          - match: '(?=,)'
            push:
              - match: '(?=\))'
                pop: true
              - include: comma-delimiter
              - match: '\b({{counter_styles}}|none)\b'
                scope: support.constant.property-value.counter-style.css

      # counters()
      # https://drafts.csswg.org/css-lists-3/#funcdef-counters
    - match: '\b(counters)(?=\()'
      scope: support.function.counter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: '({{ident}})'
            scope: entity.other.counter-name.css string.unquoted.css
          - match: '(?=,)'
            push:
              - match: '(?=\))'
                pop: true
              - include: comma-delimiter
              - include: literal-string
              - match: '\b({{counter_styles}}|none)\b'
                scope: support.constant.property-value.counter-style.css

      # symbols()
      # https://drafts.csswg.org/css-counter-styles-3/#symbols-function
    - match: '\b(symbols)(?=\()'
      scope: support.function.counter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: '\b(cyclic|numeric|alphabetic|symbolic|fixed)\b'
            scope: support.constant.symbol-type.css
          - include: comma-delimiter
          - include: literal-string
          - include: image-type

      # format()
      # https://drafts.csswg.org/css-fonts-3/#descdef-src
      # format() is also mentioned in `issue 2` at https://drafts.csswg.org/css-images-3/#issues-index
      # but does not seem to be implemented in any manner
    - match: '\b(format)(?=\()'
      scope: support.function.font-face.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: literal-string

      # local()
      # https://drafts.csswg.org/css-fonts-3/#descdef-src
    - match: '\b(local)(?=\()'
      scope: support.function.font-face.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: unquoted-string

      # Transform Functions
      # https://www.w3.org/TR/css-transforms-1/#transform-functions

      # transform functions with comma separated <number> types
      # matrix(), scale(), matrix3d(), scale3d()
    - match: '\b(matrix3d|scale3d|matrix|scale)(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: number-type
          - include: var-function

      # transform functions with comma separated <number> or <length> types
      # translate(), translate3d()
    - match: '\b(translate(3d)?)(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: percentage-type
          - include: length-type
          - include: number-type
          - include: var-function

      # transform functions with a single <number> or <length> type
      # translateX(), translateY()
    - match: '\b(translate[XY])(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: percentage-type
          - include: length-type
          - include: number-type

      # transform functions with a single <angle> type
      # rotate(), skewX(), skewY(), rotateX(), rotateY(), rotateZ()
    - match: '\b(rotate[XYZ]?|skew[XY])(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: angle-type

      # transform functions with comma separated <angle> types
      # skew()
    - match: '\b(skew)(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: angle-type

      # transform functions with a single <length> type
      # translateZ(), perspective()
    - match: '\b(translateZ|perspective)(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: length-type

      # transform functions with a comma separated <number> or <angle> types
      # rotate3d()
    - match: '\b(rotate3d)(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: angle-type
          - include: number-type

      # transform functions with a single <number> type
      # scaleX(), scaleY(), scaleZ()
    - match: '\b(scale[XYZ])(?=\()'
      scope: support.function.transform.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: number-type

      # Timing Functions
      # https://www.w3.org/TR/web-animations-1/#timing-functions

      # cubic-bezier()
      # https://www.w3.org/TR/web-animations-1/#cubic-bzier-timing-function
    - match: '\b(cubic-bezier)(?=\()'
      scope: support.function.timing.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: number-type

      # steps()
      # https://www.w3.org/TR/web-animations-1/#step-timing-function
    - match: '\b(steps)(?=\()'
      scope: support.function.timing.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: integer-type
          - match: (end|middle|start)
            scope: support.keyword.timing-direction.css

      # Shape Functions
      # https://www.w3.org/TR/css-shapes-1/#typedef-basic-shape

      # rect() - Deprecated
      # https://drafts.fxtf.org/css-masking-1/#funcdef-clip-rect
    - match: '\b(rect)(?=\()'
      scope: support.function.shape.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: \bauto\b
            scope: support.constant.property-value.css
          - include: length-type

      # inset()
      # https://www.w3.org/TR/css-shapes-1/#funcdef-inset
    - match: '\b(inset)(?=\()'
      scope: support.function.shape.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: '\bround\b'
            scope: keyword.other.css
          - include: length-type
          - include: percentage-type

      # circle()
      # https://www.w3.org/TR/css-shapes-1/#funcdef-circle
      # ellipse()
      # https://www.w3.org/TR/css-shapes-1/#funcdef-ellipse
    - match: '\b(circle|ellipse)(?=\()'
      scope: support.function.shape.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: '\bat\b'
            scope: keyword.other.css
          - match: '\b(top|right|bottom|left|center|closest-side|farthest-side)\b'
            scope: support.constant.property-value.css
          - include: length-type
          - include: percentage-type

      # polygon()
      # https://www.w3.org/TR/css-shapes-1/#funcdef-polygon
    - match: '\b(polygon)(?=\()'
      scope: support.function.shape.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: '\b(nonzero|evenodd)\b'
            scope: support.constant.property-value.css
          - include: length-type
          - include: percentage-type

      # toggle()
      # https://www.w3.org/TR/css3-values/#toggle-notation
    - match: '\b(toggle)(?=\()'
      scope: support.function.toggle.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: vendor-prefix
          - include: property-value-constants
          - include: numeric-values
          - include: color-values
          - include: literal-string

      # repeat()
      # https://drafts.csswg.org/css-grid/#funcdef-repeat
    - match: '\b(repeat)(?=\()'
      scope: support.function.grid.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: length-type
          - include: percentage-type
          - include: minmax-function
          - include: integer-type
          - include: var-function
          - match: \b(auto-fill|auto-fit)\b
            scope: support.keyword.repetitions.css
          - match: \b(max-content|min-content|auto)\b
            scope: support.constant.property-value.css

  # var()
  # https://drafts.csswg.org/css-variables/#funcdef-var
  var-function:
    - match: '\b(var)(?=\()'
      scope: support.function.var.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: custom-property-name

  # Filter Functions
  # https://drafts.fxtf.org/filters/#typedef-filter-function
  filter-functions:
      # blur()
      # https://drafts.fxtf.org/filters/#funcdef-filter-blur
    - match: '\b(blur)(?=\()'
      scope: support.function.filter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: length-type

      # brightness(), contrast(), grayscale(), invert(), opacity(), saturate(), sepia()
      # https://drafts.fxtf.org/filters/#funcdef-filter-brightness
    - match: '\b(brightness|contrast|grayscale|invert|opacity|saturate|sepia)(?=\()'
      scope: support.function.filter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: percentage-type
          - include: number-type

      # drop-shadow()
      # https://drafts.fxtf.org/filters/#funcdef-filter-drop-shadow
    - match: '\b(drop-shadow)(?=\()'
      scope: support.function.filter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: length-type
          - include: color-values

      # hue-rotate()
      # https://drafts.fxtf.org/filters/#funcdef-filter-hue-rotate
    - match: '\b(hue-rotate)(?=\()'
      scope: support.function.filter.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: angle-type

  # calc()
  # https://www.w3.org/TR/css3-values/#funcdef-calc
  calc-function:
    - match: '\b(calc)(?=\()'
      scope: support.function.calc.css
      push:
        - meta_scope: meta.function-call.css
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push: inside-calc-parens
        - match: ''
          pop: true

  inside-calc-parens:
    - meta_scope: meta.group.css
    - match: '(?=\))'
      set: function-notation-terminator
    - include: calc-function
    - include: var-function
    - include: numeric-values
    - include: attr-function
    - match: "[-/*+]"
      scope: keyword.operator.css
    - match: '\('
      scope: punctuation.definition.group.begin.css
      push: inside-calc-parens

  # attr()
  # https://www.w3.org/TR/css3-values/#funcdef-attr
  attr-function:
    - match: '\b(attr)(?=\()'
      scope: support.function.attr.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: qualified-name
          - include: literal-string
          - match: '({{ident}})'
            scope: entity.other.attribute-name.css
            push:
            - match: |-
                (?x)\b(
                    {{font_relative_lengths}}
                  | {{viewport_percentage_lengths}}
                  | {{absolute_lengths}}
                  | {{angle_units}}
                  | {{duration_units}}
                  | {{frequency_units}}
                  | {{resolution_units}}
                )\b
              scope: keyword.other.unit.css
            - match: '(?=\))'
              pop: true
            - include: comma-delimiter
            - include: property-value-constants
            - include: numeric-values
            - include: color-values

  # url()
  # https://drafts.csswg.org/css-images-3/#url-notation
  url-function:
    - match: '\b(url)(?=\()'
      scope: support.function.url.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: literal-string
          - include: unquoted-string

  # url-prefix()
  # https://www.w3.org/TR/2012/WD-css3-conditional-20120911/#url-prefix
  url-prefix-function:
    - match: '\b(url-prefix)(?=\()'
      scope: support.function.url-prefix.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: literal-string
          - include: unquoted-string

  # domain()
  # https://www.w3.org/TR/2012/WD-css3-conditional-20120911/#url-domain
  domain-function:
    - match: '\b(domain)(?=\()'
      scope: support.function.domain.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: literal-string
          - include: unquoted-string

  # regexp()
  # https://www.w3.org/TR/2012/WD-css3-conditional-20120911/#url-regexp
  regexp-function:
    - match: '\b(regexp)(?=\()'
      scope: support.function.regexp.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: literal-string

  # image()
  # https://drafts.csswg.org/css-images-3/#funcdef-image
  image-function:
    - match: '\b(image)(?=\()'
      scope: support.function.image.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: image-type
          - include: literal-string
          - include: color-values
          - include: comma-delimiter
          - include: unquoted-string

  # image-set()
  # https://drafts.csswg.org/css-images-3/#funcdef-image-set
  image-set-function:
    - match: '\b(image-set)(?=\()'
      scope: support.function.image.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: literal-string
          - include: color-values
          - include: comma-delimiter
          - include: resolution-type
          - include: image-type
          - match: '[0-9]+(x)'
            scope: constant.numeric.css
            captures:
              1: keyword.other.unit.css
          - include: unquoted-string

  # Gradient Functions
  # https://drafts.csswg.org/css-images-3/#gradients
  gradient-functions:
      # linear-gradient()
      # https://drafts.csswg.org/css-images-3/#linear-gradients
      # repeating-linear-gradient()
      # https://drafts.csswg.org/css-images-3/#funcdef-repeating-linear-gradient
    - match: '\b((?:repeating-)?linear-gradient)(?=\()'
      scope: support.function.gradient.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: angle-type
          - include: comma-delimiter
          - include: color-values
          - include: percentage-type
          - include: length-type
          - match: '\bto\b'
            scope: keyword.other.css
          - match: \b(top|right|bottom|left)\b
            scope: support.constant.property-value.css

      # radial-gradient()
      # https://drafts.csswg.org/css-images-3/#radial-gradients
      # repeating-radial-gradient()
      # https://drafts.csswg.org/css-images-3/#funcdef-repeating-radial-gradient
    - match: '\b((?:repeating-)?radial-gradient)(?=\()'
      scope: support.function.gradient.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: color-values
          - include: percentage-type
          - include: length-type
          - match: '\b(at|circle|ellipse)\b'
            scope: keyword.other.css
          - match: |-
              (?x)\b(
                 (?:c(?:losest-(?:corner|side)|enter)|farthest-(?:corner|side)|(?:righ|lef)t|bottom|top)
              )\b
            scope: support.constant.property-value.css

  # cross-fade()
  # https://drafts.csswg.org/css-images-3/#cross-fade-function
  cross-fade-function:
    - match: '\b(cross-fade)(?=\()'
      scope: support.function.image.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: percentage-type
          - include: color-values
          - include: image-type
          - include: literal-string
          - include: unquoted-string

  # minmax()
  # https://drafts.csswg.org/css-grid/#valdef-grid-template-columns-minmax
  minmax-function:
    - match: '\b(minmax)(?=\()'
      scope: support.function.grid.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: length-type
          - match: \b(max-content|min-content)\b
            scope: support.constant.property-value.css

  # Color Functions
  # https://drafts.csswg.org/css-color
  color-functions:
      # rgb(), rgba()
      # https://drafts.csswg.org/css-color/#rgb-functions
    - match: '\b(rgba?)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: percentage-type
          - include: number-type

      # hsl(), hsla()
      # https://drafts.csswg.org/css-color/#the-hsl-notation
      # hwb() - Not yet implemented by browsers
      # https://drafts.csswg.org/css-color/#funcdef-hwb
    - match: '\b(hsla?|hwb)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: angle-type
          - include: percentage-type
          - include: number-type

      # gray() - Not yet implemented by browsers
      # https://drafts.csswg.org/css-color/#funcdef-gray
    - match: '\b(gray)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: percentage-type
          - include: number-type

      # device-cmyk() - Not yet implemented by browsers
      # https://drafts.csswg.org/css-color/#funcdef-device-cmyk
    - match: '\b(device-cmyk)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: color-adjuster-functions # must be included before `color-values`
          - include: color-values
          - include: percentage-type
          - include: number-type

      # color-mod() - Not yet implemented by browsers
      # https://drafts.csswg.org/css-color/#funcdef-color-mod
    - match: '\b(color)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: comma-delimiter
          - include: color-adjuster-functions # must be included before `color-values`
          - include: var-function
          - include: color-values
          - include: angle-type
          - include: number-type

  # Color Adjuster Functions - Not yet implemented by browsers
  # https://drafts.csswg.org/css-color/#typedef-color-adjuster
  color-adjuster-functions:
      # red(), green(), blue(), alpha() - Not yet implemented by browsers
    - match: '\b(red|green|blue|alpha|a)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: color-adjuster-operators
          - include: percentage-type
          - include: number-type

      # hue() - Not yet implemented by browsers
    - match: '\b(hue|h)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: color-adjuster-operators
          - include: angle-type

      # saturation(), lightness(), whiteness(), blackness() - Not yet implemented by browsers
    - match: '\b(saturation|lightness|whiteness|blackness|[slwb])(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: color-adjuster-operators
          - include: percentage-type

      # tint(), shade(), contrast() - Not yet implemented by browsers
      # contrast() interferes with the contrast() filter function;
      # therefore, it is not yet implemented here
    - match: '\b(tint|shade)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - include: percentage-type

      # blend(), blenda() - Not yet implemented by browsers
    - match: '\b(blenda|blend)(?=\()'
      scope: support.function.color.css
      push:
        - meta_scope: meta.function-call.css
        - include: function-notation-terminator
        - match: '\('
          scope: punctuation.definition.group.begin.css
          push:
          - meta_scope: meta.group.css
          - match: '(?=\))'
            pop: true
          - match: '\b(rgb|hsl|hwb)\b'
            scope: keyword.other.color-space.css
          - include: color-values
          - include: percentage-type
          - include: var-function

  unicode-range:
    - match: |-
        (?xi)
            (u\+)
            ([0-9a-f?]{1,6}
            (?:(-)[0-9a-f]{1,6})?)
      scope: support.unicode-range.css
      captures:
        1: support.constant.unicode-range.prefix.css
        2: constant.codepoint-range.css
        3: punctuation.section.range.css

  # Qualified Name
  # https://drafts.csswg.org/css-namespaces-3/#css-qnames
  qualified-name:
    - match: '(?:({{ident}})|(\*))?([|])(?!=)'
      captures:
        1: entity.other.namespace-prefix.css
        2: entity.name.namespace.wildcard.css
        3: punctuation.separator.namespace.css

  # Custom Properties
  # https://drafts.csswg.org/css-variables/#typedef-custom-property-name
  custom-property-name:
    - match: '(--)({{nmchar}}+)'
      scope: support.type.custom-property.css
      captures:
        1: punctuation.definition.custom-property.css
        2: support.type.custom-property.name.css

  color-adjuster-operators:
    - match: '[\-\+*](?=\s+)'
      scope: keyword.operator.css

  comma-delimiter:
    - match: '\s*(,)\s*'
      captures:
        1: punctuation.separator.css

  vendor-prefix:
    - match: "-(?:webkit|moz|ms|o)-"
      scope: support.type.vendor-prefix.css

  function-notation-terminator:
    - match: '\)'
      scope: meta.group.css punctuation.definition.group.end.css
      pop: true

  at-rule-punctuation:
    - match: \;
      scope: punctuation.terminator.rule.css
    - match: (?=;|$)
      pop: true

  unquoted-string:
    - match: '[^\s''"]'
      scope: string.unquoted.css

  literal-string:
    - match: "'"
      scope: punctuation.definition.string.begin.css
      push:
        - meta_scope: string.quoted.single.css
        - match: (')|(\n)
          captures:
            1: punctuation.definition.string.end.css
            2: invalid.illegal.newline.css
          pop: true
        - include: string-content
    - match: '"'
      scope: punctuation.definition.string.begin.css
      push:
        - meta_scope: string.quoted.double.css
        - match: (")|(\n)
          captures:
            1: punctuation.definition.string.end.css
            2: invalid.illegal.newline.css
          pop: true
        - include: string-content

  string-content:
    - match: \\\s*\n
      scope: constant.character.escape.newline.css
    - match: '\\(\h{1,6}|.)'
      scope: constant.character.escape.css

  # https://www.w3.org/TR/css3-values/#numeric-types
  numeric-values:
    - include: dimensions
    - include: percentage-type
    - include: number-type

  integer-type:
    - match: '{{integer}}'
      scope: constant.numeric.css

  # Make sure `number-type` is included after any other numeric values
  # as `number-type` will consume all numeric values.
  number-type:
    - match: '{{number}}'
      scope: constant.numeric.css

  percentage-type:
    - match: '{{number}}(%)'
      scope: constant.numeric.css
      captures:
        1: keyword.other.unit.css

  dimensions:
    - include: angle-type
    - include: frequency-type
    - include: length-type
    - include: resolution-type
    - include: time-type

  length-type:
    - match: '{{number}}({{font_relative_lengths}}|{{viewport_percentage_lengths}}|{{absolute_lengths}})\b'
      scope: constant.numeric.css
      captures:
        1: keyword.other.unit.css
    - match: '0\b(?!%)'
      scope: constant.numeric.css

  time-type:
    - match: '{{number}}({{duration_units}})\b'
      scope: constant.numeric.css
      captures:
        1: keyword.other.unit.css

  frequency-type:
    - match: '{{number}}({{frequency_units}})\b'
      scope: constant.numeric.css
      captures:
        1: keyword.other.unit.css

  resolution-type:
    - match: '{{number}}({{resolution_units}})\b'
      scope: constant.numeric.css
      captures:
        1: keyword.other.unit.css

  angle-type:
    - match: '{{number}}({{angle_units}})\b'
      scope: constant.numeric.css
      captures:
        1: keyword.other.unit.css

  # https://drafts.csswg.org/css-images-3/#typedef-image
  image-type:
    - include: cross-fade-function
    - include: gradient-functions
    - include: image-function
    - include: image-set-function
    - include: url-function
